{
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Agent",
            "id": "Agent-HbbtI",
            "name": "response",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-quxJx",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-Agent-HbbtI{œdataTypeœ:œAgentœ,œidœ:œAgent-HbbtIœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-quxJx{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-quxJxœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "Agent-HbbtI",
        "sourceHandle": "{œdataTypeœ:œAgentœ,œidœ:œAgent-HbbtIœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-quxJx",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-quxJxœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-T0JLf",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "Agent-HbbtI",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ChatInput-T0JLf{œdataTypeœ:œChatInputœ,œidœ:œChatInput-T0JLfœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Agent-HbbtI{œfieldNameœ:œinput_valueœ,œidœ:œAgent-HbbtIœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ChatInput-T0JLf",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-T0JLfœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Agent-HbbtI",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAgent-HbbtIœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "PythonREPLComponent",
            "id": "PythonREPLComponent-DNzh1",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-HbbtI",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-PythonREPLComponent-DNzh1{œdataTypeœ:œPythonREPLComponentœ,œidœ:œPythonREPLComponent-DNzh1œ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-HbbtI{œfieldNameœ:œtoolsœ,œidœ:œAgent-HbbtIœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "PythonREPLComponent-DNzh1",
        "sourceHandle": "{œdataTypeœ:œPythonREPLComponentœ,œidœ:œPythonREPLComponent-DNzh1œ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-HbbtI",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-HbbtIœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "PureDashboardComponent",
            "id": "PureDashboardComponent-ytFpQ",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-HbbtI",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-PureDashboardComponent-ytFpQ{œdataTypeœ:œPureDashboardComponentœ,œidœ:œPureDashboardComponent-ytFpQœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-HbbtI{œfieldNameœ:œtoolsœ,œidœ:œAgent-HbbtIœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "PureDashboardComponent-ytFpQ",
        "sourceHandle": "{œdataTypeœ:œPureDashboardComponentœ,œidœ:œPureDashboardComponent-ytFpQœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-HbbtI",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-HbbtIœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "MCPTools",
            "id": "MCPTools-mM35s",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-HbbtI",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__MCPTools-mM35s{œdataTypeœ:œMCPToolsœ,œidœ:œMCPTools-mM35sœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-HbbtI{œfieldNameœ:œtoolsœ,œidœ:œAgent-HbbtIœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "MCPTools-mM35s",
        "sourceHandle": "{œdataTypeœ:œMCPToolsœ,œidœ:œMCPTools-mM35sœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-HbbtI",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-HbbtIœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "MCPTools",
            "id": "MCPTools-4iUQS",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-HbbtI",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__MCPTools-4iUQS{œdataTypeœ:œMCPToolsœ,œidœ:œMCPTools-4iUQSœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-HbbtI{œfieldNameœ:œtoolsœ,œidœ:œAgent-HbbtIœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "MCPTools-4iUQS",
        "sourceHandle": "{œdataTypeœ:œMCPToolsœ,œidœ:œMCPTools-4iUQSœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-HbbtI",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-HbbtIœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "description": "Get chat inputs from the Playground.",
          "display_name": "Chat Input",
          "id": "ChatInput-T0JLf",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get chat inputs from the Playground.",
            "display_name": "Chat Input",
            "documentation": "https://docs.langflow.org/components-io#chat-input",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.5.0",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Chat Message",
                "group_outputs": false,
                "method": "message_response",
                "name": "message",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-input\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Input Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Chat Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
              },
              "files": {
                "_input_type": "FileInput",
                "advanced": true,
                "display_name": "Files",
                "dynamic": false,
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "file_path": "",
                "info": "Files to be sent with the message.",
                "list": true,
                "list_add_label": "Add More",
                "name": "files",
                "placeholder": "",
                "required": false,
                "show": true,
                "temp_file": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Input Text",
                "dynamic": false,
                "info": "Message to be passed as input.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatInput"
        },
        "dragging": false,
        "id": "ChatInput-T0JLf",
        "measured": {
          "height": 48,
          "width": 192
        },
        "position": {
          "x": 1020.8681250321578,
          "y": 1010.1840197970927
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Display a chat message in the Playground.",
          "display_name": "Chat Output",
          "id": "ChatOutput-quxJx",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "https://docs.langflow.org/components-io#chat-output",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color",
              "clean_data"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.5.0",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Output Message",
                "group_outputs": false,
                "method": "message_response",
                "name": "message",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Basic Clean Data",
                "dynamic": false,
                "info": "Whether to clean the data",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nimport orjson\nfrom fastapi.encoders import jsonable_encoder\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, DropdownInput, HandleInput, MessageTextInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.template.field.base import Output\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-output\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Inputs\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Output Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _serialize_data(self, data: Data) -> str:\n        \"\"\"Serialize Data object to JSON string.\"\"\"\n        # Convert data.data to JSON-serializable format\n        serializable_data = jsonable_encoder(data.data)\n        # Serialize with orjson, enabling pretty printing with indentation\n        json_bytes = orjson.dumps(serializable_data, option=orjson.OPT_INDENT_2)\n        # Convert bytes to string and wrap in Markdown code blocks\n        return \"```json\\n\" + json_bytes.decode(\"utf-8\") + \"\\n```\"\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([safe_convert(item, clean_data=self.clean_data) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return safe_convert(self.input_value)\n"
              },
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Inputs",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatOutput"
        },
        "dragging": false,
        "id": "ChatOutput-quxJx",
        "measured": {
          "height": 48,
          "width": 192
        },
        "position": {
          "x": 1992.0130841265009,
          "y": 230.58155337576508
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Define the agent's instructions, then enter a task to complete using tools.",
          "display_name": "Agent",
          "id": "Agent-HbbtI",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Define the agent's instructions, then enter a task to complete using tools.",
            "display_name": "Agent",
            "documentation": "https://docs.langflow.org/agents",
            "edited": false,
            "field_order": [
              "agent_llm",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout",
              "system_prompt",
              "n_messages",
              "tools",
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "agent_description",
              "add_current_date_tool"
            ],
            "frozen": false,
            "icon": "bot",
            "last_updated": "2025-09-13T06:42:09.892Z",
            "legacy": false,
            "lf_version": "1.5.0",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Response",
                "group_outputs": false,
                "hidden": false,
                "method": "message_response",
                "name": "response",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "add_current_date_tool": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Current Date",
                "dynamic": false,
                "info": "If true, will add a tool to the agent that returns the current date.",
                "list": false,
                "list_add_label": "Add More",
                "name": "add_current_date_tool",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "agent_description": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Agent Description [Deprecated]",
                "dynamic": false,
                "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "agent_description",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "A helpful assistant with access to the following tools:"
              },
              "agent_llm": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model Provider",
                "dynamic": false,
                "info": "The provider of the language model that the agent will use to generate responses.",
                "input_types": [],
                "name": "agent_llm",
                "options": [
                  "Anthropic",
                  "Google Generative AI",
                  "Groq",
                  "OpenAI",
                  "Custom"
                ],
                "options_metadata": [
                  {
                    "icon": "Anthropic"
                  },
                  {
                    "icon": "GoogleGenerativeAI"
                  },
                  {
                    "icon": "Groq"
                  },
                  {
                    "icon": "OpenAI"
                  },
                  {
                    "icon": "brain"
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "OpenAI"
              },
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "input_types": [],
                "load_from_db": false,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers.current_date import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.custom_component.component import _get_component_toolkit\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.field_typing import Tool\nfrom langflow.io import BoolInput, DropdownInput, IntInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nMODEL_PROVIDERS_LIST = [\"Anthropic\", \"Google Generative AI\", \"Groq\", \"OpenAI\"]\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    documentation: str = \"https://docs.langflow.org/agents\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*MODEL_PROVIDERS_LIST, \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in MODEL_PROVIDERS_LIST] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Chat History Messages\",\n            value=100,\n            info=\"Number of chat history messages to retrieve.\",\n            advanced=True,\n            show=True,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        # removed memory inputs from agent component\n        # *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n            if isinstance(self.chat_history, Message):\n                self.chat_history = [self.chat_history]\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n            # note the tools are not required to run the agent, hence the validation removed.\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools or [],\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        # TODO: This is a temporary fix to avoid message duplication. We should develop a function for this.\n        messages = (\n            await MemoryComponent(**self.get_base_args())\n            .set(session_id=self.graph.session_id, order=\"Ascending\", n_messages=self.n_messages)\n            .retrieve_messages()\n        )\n        return [\n            message for message in messages if getattr(message, \"id\", None) != getattr(self.input_value, \"id\", None)\n        ]\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {}\n        for input_ in inputs:\n            if hasattr(self, f\"{prefix}{input_.name}\"):\n                model_kwargs[input_.name] = getattr(self, f\"{prefix}{input_.name}\")\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n\n    async def _get_tools(self) -> list[Tool]:\n        component_toolkit = _get_component_toolkit()\n        tools_names = self._build_tools_names()\n        agent_description = self.get_tool_description()\n        # TODO: Agent Description Depreciated Feature to be removed\n        description = f\"{agent_description}{tools_names}\"\n        tools = component_toolkit(component=self).get_tools(\n            tool_name=\"Call_Agent\", tool_description=description, callbacks=self.get_langchain_callbacks()\n        )\n        if hasattr(self, \"tools_metadata\"):\n            tools = component_toolkit(component=self, metadata=self.tools_metadata).update_tools_metadata(tools=tools)\n        return tools\n"
              },
              "handle_parsing_errors": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Handle Parse Errors",
                "dynamic": false,
                "info": "Should the Agent fix errors when reading user input for better processing?",
                "list": false,
                "list_add_label": "Add More",
                "name": "handle_parsing_errors",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "input_value": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "The input provided by the user for the agent to process.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "json_mode": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "JSON Mode",
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "list": false,
                "list_add_label": "Add More",
                "name": "json_mode",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "max_iterations": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Iterations",
                "dynamic": false,
                "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_iterations",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 15
              },
              "max_retries": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_retries",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 5
              },
              "max_tokens": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Tokens",
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_tokens",
                "placeholder": "",
                "range_spec": {
                  "max": 128000,
                  "min": 0,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "model_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "list": false,
                "list_add_label": "Add More",
                "name": "model_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Model Name",
                "dynamic": false,
                "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                "load_from_db": false,
                "name": "model_name",
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4.1",
                  "gpt-4.1-mini",
                  "gpt-4.1-nano",
                  "gpt-4.5-preview",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "o1",
                  "o1-mini",
                  "o1-pro",
                  "o3-mini",
                  "o3",
                  "o3-pro",
                  "o4-mini",
                  "o4-mini-high"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": false,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "gpt-oss-120b"
              },
              "n_messages": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Chat History Messages",
                "dynamic": false,
                "info": "Number of chat history messages to retrieve.",
                "list": false,
                "list_add_label": "Add More",
                "name": "n_messages",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 100
              },
              "openai_api_base": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_api_base",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "https://openrouter.ai/api/v1"
              },
              "seed": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Seed",
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "list": false,
                "list_add_label": "Add More",
                "name": "seed",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "system_prompt": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Agent Instructions",
                "dynamic": false,
                "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_prompt",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "You are an autonomous data assistant specialized in SQL database analysis and RAG-based information retrieval. Execute complete analysis workflows using ONLY tool-retrieved information.\n\nCORE RULES:\n- Always use MCP tools before responding\n- Never use pre-trained knowledge\n- Work systematically until reaching definitive conclusions\n- Show all tool results in responses\n\nWORKFLOW:\n1. Discover schema and table structures first\n2. Execute comprehensive queries with proper JOINs\n3. Include statistical measures (COUNT, AVG, STDDEV)\n4. Validate results and handle errors appropriately\n\nCONSISTENCY:\n- Use standardized SQL patterns\n- Present results in structured format\n- Follow deterministic execution order\n- Continue until complete answer achieved\n- Keep in mind that Think-Action-Observation\n\nExecute using verified data from available tools only."
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": true,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "",
                "max_label": "",
                "max_label_icon": "",
                "min_label": "",
                "min_label_icon": "",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 1,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0.1
              },
              "timeout": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timeout",
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "list": false,
                "list_add_label": "Add More",
                "name": "timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 700
              },
              "tools": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Tools",
                "dynamic": false,
                "info": "These are the tools that the agent can use to help with tasks.",
                "input_types": [
                  "Tool"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "tools",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "verbose": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Verbose",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "verbose",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "Agent"
        },
        "dragging": false,
        "id": "Agent-HbbtI",
        "measured": {
          "height": 591,
          "width": 320
        },
        "position": {
          "x": 1490.7472111200718,
          "y": 8.845687588314508
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "PythonREPLComponent-DNzh1",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Run Python code with optional imports. Use print() to see the output.",
            "display_name": "Python Interpreter",
            "documentation": "https://docs.langflow.org/components-processing#python-interpreter",
            "edited": false,
            "field_order": [
              "global_imports",
              "python_code"
            ],
            "frozen": false,
            "icon": "square-terminal",
            "last_updated": "2025-09-13T06:42:09.893Z",
            "legacy": false,
            "lf_version": "1.5.0",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "group_outputs": false,
                "hidden": null,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import importlib\n\nfrom langchain_experimental.utilities import PythonREPL\n\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.io import CodeInput, Output, StrInput\nfrom langflow.schema.data import Data\n\n\nclass PythonREPLComponent(Component):\n    display_name = \"Python Interpreter\"\n    description = \"Run Python code with optional imports. Use print() to see the output.\"\n    documentation: str = \"https://docs.langflow.org/components-processing#python-interpreter\"\n    icon = \"square-terminal\"\n\n    inputs = [\n        StrInput(\n            name=\"global_imports\",\n            display_name=\"Global Imports\",\n            info=\"A comma-separated list of modules to import globally, e.g. 'math,numpy,pandas'.\",\n            value=\"math,pandas\",\n            required=True,\n        ),\n        CodeInput(\n            name=\"python_code\",\n            display_name=\"Python Code\",\n            info=\"The Python code to execute. Only modules specified in Global Imports can be used.\",\n            value=\"print('Hello, World!')\",\n            input_types=[\"Message\"],\n            tool_mode=True,\n            required=True,\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Results\",\n            name=\"results\",\n            type_=Data,\n            method=\"run_python_repl\",\n        ),\n    ]\n\n    def get_globals(self, global_imports: str | list[str]) -> dict:\n        \"\"\"Create a globals dictionary with only the specified allowed imports.\"\"\"\n        global_dict = {}\n\n        try:\n            if isinstance(global_imports, str):\n                modules = [module.strip() for module in global_imports.split(\",\")]\n            elif isinstance(global_imports, list):\n                modules = global_imports\n            else:\n                msg = \"global_imports must be either a string or a list\"\n                raise TypeError(msg)\n\n            for module in modules:\n                try:\n                    imported_module = importlib.import_module(module)\n                    global_dict[imported_module.__name__] = imported_module\n                except ImportError as e:\n                    msg = f\"Could not import module {module}: {e!s}\"\n                    raise ImportError(msg) from e\n\n        except Exception as e:\n            self.log(f\"Error in global imports: {e!s}\")\n            raise\n        else:\n            self.log(f\"Successfully imported modules: {list(global_dict.keys())}\")\n            return global_dict\n\n    def run_python_repl(self) -> Data:\n        try:\n            globals_ = self.get_globals(self.global_imports)\n            python_repl = PythonREPL(_globals=globals_)\n            result = python_repl.run(self.python_code)\n            result = result.strip() if result else \"\"\n\n            self.log(\"Code execution completed successfully\")\n            return Data(data={\"result\": result})\n\n        except ImportError as e:\n            error_message = f\"Import Error: {e!s}\"\n            self.log(error_message)\n            return Data(data={\"error\": error_message})\n\n        except SyntaxError as e:\n            error_message = f\"Syntax Error: {e!s}\"\n            self.log(error_message)\n            return Data(data={\"error\": error_message})\n\n        except (NameError, TypeError, ValueError) as e:\n            error_message = f\"Error during execution: {e!s}\"\n            self.log(error_message)\n            return Data(data={\"error\": error_message})\n\n    def build(self):\n        return self.run_python_repl\n"
              },
              "global_imports": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Global Imports",
                "dynamic": false,
                "info": "A comma-separated list of modules to import globally, e.g. 'math,numpy,pandas'.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "global_imports",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "math,pandas"
              },
              "python_code": {
                "_input_type": "CodeInput",
                "advanced": false,
                "display_name": "Python Code",
                "dynamic": false,
                "info": "The Python code to execute. Only modules specified in Global Imports can be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "python_code",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "type": "code",
                "value": "print('Hello, World!')"
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "python_code": {
                        "description": "The Python code to execute. Only modules specified in Global Imports can be used.",
                        "title": "Python Code",
                        "type": "string"
                      }
                    },
                    "description": "Run Python code with optional imports. Use print() to see the output.",
                    "display_description": "Run Python code with optional imports. Use print() to see the output.",
                    "display_name": "run_python_repl",
                    "name": "run_python_repl",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "run_python_repl"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "PythonREPLComponent"
        },
        "dragging": false,
        "id": "PythonREPLComponent-DNzh1",
        "measured": {
          "height": 299,
          "width": 320
        },
        "position": {
          "x": 489.83110455162307,
          "y": 734.836650367026
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "PureDashboardComponent-ytFpQ",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Create dashboards using only HTML/CSS/JavaScript - no external dependencies",
            "display_name": "Pure HTML Dashboard",
            "documentation": "https://docs.langflow.org/components-custom-components",
            "edited": true,
            "field_order": [
              "dataframe_input",
              "text_data_input",
              "dashboard_type",
              "dashboard_title",
              "show_kpi_cards",
              "dark_theme",
              "primary_color"
            ],
            "frozen": false,
            "icon": "📊",
            "last_updated": "2025-09-13T06:42:09.893Z",
            "legacy": false,
            "lf_version": "1.5.0",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "group_outputs": false,
                "hidden": null,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import json\nimport base64\nfrom typing import List, Dict, Any, Optional, Union\nfrom datetime import datetime\nimport statistics\nimport math\n\nfrom langflow.custom import Component\nfrom langflow.io import MessageTextInput, DropdownInput, DataFrameInput, BoolInput, IntInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.data import Data\n\n\nclass PureDashboardComponent(Component):\n    display_name = \"Pure HTML Dashboard\"\n    description = \"Create dashboards using only HTML/CSS/JavaScript - no external dependencies\"\n    documentation: str = \"https://docs.langflow.org/components-custom-components\"\n    icon = \"📊\"\n    name = \"PureDashboardComponent\"\n\n    inputs = [\n        DataFrameInput(\n            name=\"dataframe_input\",\n            display_name=\"DataFrame Input\",\n            info=\"Primary data source as DataFrame\",\n            required=False,\n        ),\n        MessageTextInput(\n            name=\"text_data_input\",\n            display_name=\"Text Data Input\",\n            info=\"Fallback CSV/JSON data input\",\n            value=\"Sales Q1,15000\\nSales Q2,18000\\nSales Q3,22000\\nSales Q4,19000\",\n            tool_mode=True,\n        ),\n        DropdownInput(\n            name=\"dashboard_type\",\n            display_name=\"Dashboard Type\",\n            info=\"Select dashboard layout\",\n            options=[\"executive\", \"sales\", \"analytics\", \"multi_chart\"],\n            value=\"executive\",\n        ),\n        MessageTextInput(\n            name=\"dashboard_title\",\n            display_name=\"Dashboard Title\",\n            info=\"Main dashboard title\",\n            value=\"Business Dashboard\",\n            tool_mode=True,\n        ),\n        BoolInput(\n            name=\"show_kpi_cards\",\n            display_name=\"Show KPI Cards\",\n            info=\"Include KPI summary cards\",\n            value=True,\n        ),\n        BoolInput(\n            name=\"dark_theme\",\n            display_name=\"Dark Theme\",\n            info=\"Use dark color scheme\",\n            value=True,\n        ),\n        DropdownInput(\n            name=\"primary_color\",\n            display_name=\"Primary Color\",\n            info=\"Main color theme\",\n            options=[\"blue\", \"green\", \"purple\", \"orange\", \"red\", \"teal\"],\n            value=\"blue\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Dashboard HTML\", name=\"output\", method=\"create_dashboard\"),\n    ]\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.color_schemes = self._get_color_schemes()\n\n    def _get_color_schemes(self):\n        \"\"\"Define color schemes for different themes\"\"\"\n        return {\n            \"blue\": {\n                \"primary\": \"#2563eb\",\n                \"secondary\": \"#3b82f6\", \n                \"accent\": \"#60a5fa\",\n                \"success\": \"#10b981\",\n                \"warning\": \"#f59e0b\",\n                \"error\": \"#ef4444\"\n            },\n            \"green\": {\n                \"primary\": \"#059669\",\n                \"secondary\": \"#10b981\",\n                \"accent\": \"#34d399\", \n                \"success\": \"#22c55e\",\n                \"warning\": \"#f59e0b\",\n                \"error\": \"#ef4444\"\n            },\n            \"purple\": {\n                \"primary\": \"#7c3aed\",\n                \"secondary\": \"#8b5cf6\",\n                \"accent\": \"#a78bfa\",\n                \"success\": \"#10b981\", \n                \"warning\": \"#f59e0b\",\n                \"error\": \"#ef4444\"\n            },\n            \"orange\": {\n                \"primary\": \"#ea580c\",\n                \"secondary\": \"#f97316\",\n                \"accent\": \"#fb923c\",\n                \"success\": \"#10b981\",\n                \"warning\": \"#f59e0b\", \n                \"error\": \"#ef4444\"\n            },\n            \"red\": {\n                \"primary\": \"#dc2626\",\n                \"secondary\": \"#ef4444\",\n                \"accent\": \"#f87171\",\n                \"success\": \"#10b981\",\n                \"warning\": \"#f59e0b\",\n                \"error\": \"#ef4444\"\n            },\n            \"teal\": {\n                \"primary\": \"#0d9488\",\n                \"secondary\": \"#14b8a6\", \n                \"accent\": \"#2dd4bf\",\n                \"success\": \"#10b981\",\n                \"warning\": \"#f59e0b\",\n                \"error\": \"#ef4444\"\n            }\n        }\n\n    def parse_data_source(self) -> List[Dict[str, Any]]:\n        \"\"\"Parse data from DataFrame or text input\"\"\"\n        try:\n            # Priority 1: Use DataFrame if provided\n            if hasattr(self, 'dataframe_input') and self.dataframe_input is not None:\n                if hasattr(self.dataframe_input, 'to_dict'):\n                    return self.dataframe_input.to_dict('records')\n                elif hasattr(self.dataframe_input, '__iter__'):\n                    return list(self.dataframe_input)\n                else:\n                    return [self.dataframe_input]\n            \n            # Priority 2: Parse text data\n            return self._parse_text_data(self.text_data_input)\n            \n        except Exception as e:\n            self.status = f\"Data parsing error: {str(e)}\"\n            # Return sample data\n            return [\n                {'Category': 'Q1', 'Sales': 15000, 'Profit': 3000},\n                {'Category': 'Q2', 'Sales': 18000, 'Profit': 4500},\n                {'Category': 'Q3', 'Sales': 22000, 'Profit': 6600},\n                {'Category': 'Q4', 'Sales': 19000, 'Profit': 4750}\n            ]\n\n    def _parse_text_data(self, text_input: str) -> List[Dict[str, Any]]:\n        \"\"\"Parse text input into list of dictionaries\"\"\"\n        text_input = text_input.strip()\n        \n        # Try JSON first\n        if text_input.startswith('{') or text_input.startswith('['):\n            try:\n                data = json.loads(text_input)\n                return data if isinstance(data, list) else [data]\n            except json.JSONDecodeError:\n                pass\n        \n        # Parse CSV format\n        lines = [line.strip() for line in text_input.split('\\n') if line.strip()]\n        data_list = []\n        \n        for line in lines:\n            if ',' in line:\n                parts = [p.strip() for p in line.split(',')]\n                if len(parts) >= 2:\n                    row = {'Category': parts[0]}\n                    \n                    # Parse values\n                    for i, part in enumerate(parts[1:], start=1):\n                        col_name = f'Value_{i}' if i == 1 else f'Value_{i}'\n                        if i == 1:\n                            col_name = 'Value'\n                        try:\n                            row[col_name] = float(part.replace(',', ''))\n                        except ValueError:\n                            row[col_name] = part\n                    data_list.append(row)\n        \n        return data_list if data_list else [{'Category': 'Sample', 'Value': 100}]\n\n    def calculate_analytics(self, data: List[Dict[str, Any]]) -> Dict[str, Any]:\n        \"\"\"Calculate analytics and KPIs from data\"\"\"\n        if not data:\n            return {}\n        \n        analytics = {\n            'total_records': len(data),\n            'columns': list(data[0].keys()) if data else [],\n            'last_updated': datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        }\n        \n        # Find numeric columns\n        numeric_data = {}\n        for item in data:\n            for key, value in item.items():\n                if isinstance(value, (int, float)):\n                    if key not in numeric_data:\n                        numeric_data[key] = []\n                    numeric_data[key].append(value)\n        \n        # Calculate KPIs for numeric columns\n        analytics['kpis'] = {}\n        for col_name, values in numeric_data.items():\n            if values:\n                analytics['kpis'][col_name] = {\n                    'total': sum(values),\n                    'average': statistics.mean(values),\n                    'max': max(values),\n                    'min': min(values),\n                    'median': statistics.median(values),\n                    'count': len(values),\n                    'growth': self._calculate_growth_rate(values)\n                }\n        \n        return analytics\n\n    def _calculate_growth_rate(self, values: List[Union[int, float]]) -> float:\n        \"\"\"Calculate growth rate between first and last values\"\"\"\n        if len(values) < 2 or values[0] == 0:\n            return 0.0\n        return ((values[-1] - values[0]) / values[0]) * 100\n\n    def _format_number(self, num: Union[int, float]) -> str:\n        \"\"\"Format numbers for display\"\"\"\n        if abs(num) >= 1000000:\n            return f\"{num/1000000:.1f}M\"\n        elif abs(num) >= 1000:\n            return f\"{num/1000:.1f}K\"\n        else:\n            return f\"{num:,.0f}\" if num == int(num) else f\"{num:,.1f}\"\n\n    def create_dashboard_html(self, data: List[Dict[str, Any]], analytics: Dict[str, Any]) -> str:\n        \"\"\"Create complete dashboard HTML\"\"\"\n        colors = self.color_schemes[self.primary_color]\n        theme_class = \"dark-theme\" if self.dark_theme else \"light-theme\"\n        \n        return f\"\"\"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{self.dashboard_title}</title>\n    <style>\n        :root {{\n            --primary-color: {colors['primary']};\n            --secondary-color: {colors['secondary']};\n            --accent-color: {colors['accent']};\n            --success-color: {colors['success']};\n            --warning-color: {colors['warning']};\n            --error-color: {colors['error']};\n        }}\n        \n        * {{\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }}\n        \n        body {{\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            line-height: 1.6;\n            transition: all 0.3s ease;\n        }}\n        \n        .light-theme {{\n            --bg-primary: #ffffff;\n            --bg-secondary: #f8fafc;\n            --bg-card: #ffffff;\n            --text-primary: #1f2937;\n            --text-secondary: #6b7280;\n            --border-color: #e5e7eb;\n            --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n        }}\n        \n        .dark-theme {{\n            --bg-primary: #111827;\n            --bg-secondary: #1f2937;\n            --bg-card: #374151;\n            --text-primary: #f9fafb;\n            --text-secondary: #d1d5db;\n            --border-color: #4b5563;\n            --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3);\n        }}\n        \n        body.light-theme {{ background: var(--bg-secondary); color: var(--text-primary); }}\n        body.dark-theme {{ background: var(--bg-secondary); color: var(--text-primary); }}\n        \n        .dashboard-container {{\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 20px;\n            background: var(--bg-primary);\n            border-radius: 12px;\n            box-shadow: var(--shadow);\n            margin-top: 20px;\n        }}\n        \n        .dashboard-header {{\n            text-align: center;\n            margin-bottom: 30px;\n            padding: 30px;\n            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));\n            border-radius: 12px;\n            color: white;\n        }}\n        \n        .dashboard-title {{\n            font-size: 2.5rem;\n            font-weight: 700;\n            margin-bottom: 8px;\n        }}\n        \n        .dashboard-subtitle {{\n            font-size: 1.1rem;\n            opacity: 0.9;\n        }}\n        \n        .dashboard-grid {{\n            display: grid;\n            gap: 20px;\n            margin-bottom: 30px;\n        }}\n        \n        .kpi-grid {{\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n            gap: 20px;\n            margin-bottom: 30px;\n        }}\n        \n        .kpi-card {{\n            background: var(--bg-card);\n            border: 1px solid var(--border-color);\n            border-radius: 12px;\n            padding: 24px;\n            text-align: center;\n            transition: all 0.3s ease;\n            position: relative;\n            overflow: hidden;\n        }}\n        \n        .kpi-card::before {{\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            right: 0;\n            height: 4px;\n            background: linear-gradient(90deg, var(--primary-color), var(--accent-color));\n        }}\n        \n        .kpi-card:hover {{\n            transform: translateY(-4px);\n            box-shadow: var(--shadow);\n        }}\n        \n        .kpi-value {{\n            font-size: 2.5rem;\n            font-weight: 800;\n            color: var(--primary-color);\n            margin-bottom: 8px;\n        }}\n        \n        .kpi-label {{\n            font-size: 0.95rem;\n            color: var(--text-secondary);\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n            margin-bottom: 12px;\n        }}\n        \n        .kpi-growth {{\n            display: inline-flex;\n            align-items: center;\n            font-size: 0.9rem;\n            font-weight: 600;\n            padding: 4px 8px;\n            border-radius: 6px;\n        }}\n        \n        .growth-positive {{ color: var(--success-color); background: rgba(16, 185, 129, 0.1); }}\n        .growth-negative {{ color: var(--error-color); background: rgba(239, 68, 68, 0.1); }}\n        .growth-neutral {{ color: var(--text-secondary); background: var(--bg-secondary); }}\n        \n        .chart-container {{\n            background: var(--bg-card);\n            border: 1px solid var(--border-color);\n            border-radius: 12px;\n            padding: 24px;\n            margin-bottom: 20px;\n        }}\n        \n        .chart-title {{\n            font-size: 1.25rem;\n            font-weight: 600;\n            margin-bottom: 20px;\n            color: var(--text-primary);\n        }}\n        \n        .chart-canvas {{\n            width: 100%;\n            height: 300px;\n            border-radius: 8px;\n        }}\n        \n        .data-table {{\n            width: 100%;\n            border-collapse: collapse;\n            background: var(--bg-card);\n            border-radius: 12px;\n            overflow: hidden;\n            box-shadow: var(--shadow);\n        }}\n        \n        .data-table th,\n        .data-table td {{\n            padding: 12px 16px;\n            text-align: left;\n            border-bottom: 1px solid var(--border-color);\n        }}\n        \n        .data-table th {{\n            background: var(--primary-color);\n            color: white;\n            font-weight: 600;\n            font-size: 0.9rem;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n        }}\n        \n        .data-table tr:hover {{\n            background: var(--bg-secondary);\n        }}\n        \n        .chart-grid {{\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));\n            gap: 20px;\n        }}\n        \n        @media (max-width: 768px) {{\n            .dashboard-title {{ font-size: 2rem; }}\n            .kpi-grid {{ grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); }}\n            .chart-grid {{ grid-template-columns: 1fr; }}\n            .chart-canvas {{ height: 250px; }}\n        }}\n        \n        .theme-toggle {{\n            position: absolute;\n            top: 20px;\n            right: 20px;\n            padding: 8px 16px;\n            background: rgba(255, 255, 255, 0.2);\n            border: 1px solid rgba(255, 255, 255, 0.3);\n            border-radius: 6px;\n            color: white;\n            cursor: pointer;\n            font-size: 0.9rem;\n        }}\n        \n        .theme-toggle:hover {{\n            background: rgba(255, 255, 255, 0.3);\n        }}\n        \n        .loading {{\n            display: inline-block;\n            width: 20px;\n            height: 20px;\n            border: 2px solid var(--border-color);\n            border-top: 2px solid var(--primary-color);\n            border-radius: 50%;\n            animation: spin 1s linear infinite;\n        }}\n        \n        @keyframes spin {{\n            0% {{ transform: rotate(0deg); }}\n            100% {{ transform: rotate(360deg); }}\n        }}\n    </style>\n</head>\n<body class=\"{theme_class}\">\n    <div class=\"dashboard-container\">\n        <div class=\"dashboard-header\">\n            <button class=\"theme-toggle\" onclick=\"toggleTheme()\">\n                🌓 Toggle Theme\n            </button>\n            <h1 class=\"dashboard-title\">{self.dashboard_title}</h1>\n            <p class=\"dashboard-subtitle\">\n                {analytics.get('total_records', 0)} records • \n                Updated: {analytics.get('last_updated', 'N/A')}\n            </p>\n        </div>\n        \n        {self._generate_kpi_section(analytics) if self.show_kpi_cards else ''}\n        \n        <div class=\"dashboard-grid\">\n            {self._generate_charts_section(data, analytics)}\n        </div>\n        \n        {self._generate_data_table(data)}\n    </div>\n    \n    <script>\n        // Dashboard data\n        const dashboardData = {json.dumps(data)};\n        const analytics = {json.dumps(analytics)};\n        \n        // Theme toggle\n        function toggleTheme() {{\n            const body = document.body;\n            if (body.classList.contains('dark-theme')) {{\n                body.classList.remove('dark-theme');\n                body.classList.add('light-theme');\n            }} else {{\n                body.classList.remove('light-theme');\n                body.classList.add('dark-theme');\n            }}\n            \n            // Redraw charts with new theme\n            setTimeout(() => {{\n                drawAllCharts();\n            }}, 100);\n        }}\n        \n        // Initialize dashboard\n        document.addEventListener('DOMContentLoaded', function() {{\n            drawAllCharts();\n            addInteractivity();\n        }});\n        \n        function drawAllCharts() {{\n            {self._generate_chart_scripts(data, analytics)}\n        }}\n        \n        function addInteractivity() {{\n            // Add hover effects and animations\n            document.querySelectorAll('.kpi-card').forEach(card => {{\n                card.addEventListener('mouseenter', function() {{\n                    this.style.transform = 'translateY(-6px) scale(1.02)';\n                }});\n                \n                card.addEventListener('mouseleave', function() {{\n                    this.style.transform = 'translateY(0) scale(1)';\n                }});\n            }});\n        }}\n        \n        // Utility functions\n        function formatNumber(num) {{\n            if (Math.abs(num) >= 1000000) {{\n                return (num / 1000000).toFixed(1) + 'M';\n            }} else if (Math.abs(num) >= 1000) {{\n                return (num / 1000).toFixed(1) + 'K';\n            }}\n            return new Intl.NumberFormat().format(num);\n        }}\n        \n        function getThemeColors() {{\n            const style = getComputedStyle(document.body);\n            return {{\n                primary: style.getPropertyValue('--primary-color').trim(),\n                secondary: style.getPropertyValue('--secondary-color').trim(),\n                accent: style.getPropertyValue('--accent-color').trim(),\n                success: style.getPropertyValue('--success-color').trim(),\n                text: style.getPropertyValue('--text-primary').trim(),\n                background: style.getPropertyValue('--bg-card').trim()\n            }};\n        }}\n    </script>\n</body>\n</html>\n        \"\"\"\n\n    def _generate_kpi_section(self, analytics: Dict[str, Any]) -> str:\n        \"\"\"Generate KPI cards HTML\"\"\"\n        if 'kpis' not in analytics:\n            return \"\"\n        \n        kpi_html = '<div class=\"kpi-grid\">'\n        \n        for kpi_name, kpi_data in list(analytics['kpis'].items())[:4]:\n            total = kpi_data.get('total', 0)\n            growth = kpi_data.get('growth', 0)\n            \n            # Growth styling\n            if growth > 0:\n                growth_class = \"growth-positive\"\n                growth_icon = \"📈\"\n            elif growth < 0:\n                growth_class = \"growth-negative\"  \n                growth_icon = \"📉\"\n            else:\n                growth_class = \"growth-neutral\"\n                growth_icon = \"➖\"\n            \n            kpi_html += f\"\"\"\n            <div class=\"kpi-card\">\n                <div class=\"kpi-value\">{self._format_number(total)}</div>\n                <div class=\"kpi-label\">{kpi_name.replace('_', ' ').title()}</div>\n                <div class=\"kpi-growth {growth_class}\">\n                    {growth_icon} {abs(growth):.1f}%\n                </div>\n            </div>\n            \"\"\"\n        \n        kpi_html += '</div>'\n        return kpi_html\n\n    def _generate_charts_section(self, data: List[Dict[str, Any]], analytics: Dict[str, Any]) -> str:\n        \"\"\"Generate charts section based on dashboard type\"\"\"\n        if self.dashboard_type == \"executive\":\n            return self._generate_executive_charts(data)\n        elif self.dashboard_type == \"sales\":\n            return self._generate_sales_charts(data)\n        elif self.dashboard_type == \"analytics\":\n            return self._generate_analytics_charts(data)\n        else:  # multi_chart\n            return self._generate_multi_charts(data)\n\n    def _generate_executive_charts(self, data: List[Dict[str, Any]]) -> str:\n        \"\"\"Generate executive dashboard charts\"\"\"\n        return f\"\"\"\n        <div class=\"chart-grid\">\n            <div class=\"chart-container\">\n                <h3 class=\"chart-title\">📊 Primary Metrics</h3>\n                <canvas id=\"barChart\" class=\"chart-canvas\"></canvas>\n            </div>\n            <div class=\"chart-container\">\n                <h3 class=\"chart-title\">📈 Trend Analysis</h3>\n                <canvas id=\"lineChart\" class=\"chart-canvas\"></canvas>\n            </div>\n        </div>\n        \"\"\"\n\n    def _generate_sales_charts(self, data: List[Dict[str, Any]]) -> str:\n        \"\"\"Generate sales dashboard charts\"\"\"\n        return f\"\"\"\n        <div class=\"chart-grid\">\n            <div class=\"chart-container\">\n                <h3 class=\"chart-title\">💰 Sales Performance</h3>\n                <canvas id=\"salesChart\" class=\"chart-canvas\"></canvas>\n            </div>\n            <div class=\"chart-container\">\n                <h3 class=\"chart-title\">🥧 Revenue Distribution</h3>\n                <canvas id=\"pieChart\" class=\"chart-canvas\"></canvas>\n            </div>\n        </div>\n        \"\"\"\n\n    def _generate_analytics_charts(self, data: List[Dict[str, Any]]) -> str:\n        \"\"\"Generate analytics dashboard charts\"\"\"\n        return f\"\"\"\n        <div class=\"chart-grid\">\n            <div class=\"chart-container\">\n                <h3 class=\"chart-title\">📊 Data Analysis</h3>\n                <canvas id=\"analyticsChart\" class=\"chart-canvas\"></canvas>\n            </div>\n            <div class=\"chart-container\">\n                <h3 class=\"chart-title\">🎯 Performance Metrics</h3>\n                <canvas id=\"metricsChart\" class=\"chart-canvas\"></canvas>\n            </div>\n        </div>\n        \"\"\"\n\n    def _generate_multi_charts(self, data: List[Dict[str, Any]]) -> str:\n        \"\"\"Generate multiple chart types\"\"\"\n        return f\"\"\"\n        <div class=\"chart-grid\">\n            <div class=\"chart-container\">\n                <h3 class=\"chart-title\">📊 Bar Chart</h3>\n                <canvas id=\"barChart\" class=\"chart-canvas\"></canvas>\n            </div>\n            <div class=\"chart-container\">\n                <h3 class=\"chart-title\">📈 Line Chart</h3>\n                <canvas id=\"lineChart\" class=\"chart-canvas\"></canvas>\n            </div>\n            <div class=\"chart-container\">\n                <h3 class=\"chart-title\">🥧 Pie Chart</h3>\n                <canvas id=\"pieChart\" class=\"chart-canvas\"></canvas>\n            </div>\n            <div class=\"chart-container\">\n                <h3 class=\"chart-title\">📉 Area Chart</h3>\n                <canvas id=\"areaChart\" class=\"chart-canvas\"></canvas>\n            </div>\n        </div>\n        \"\"\"\n\n    def _generate_data_table(self, data: List[Dict[str, Any]]) -> str:\n        \"\"\"Generate data table HTML\"\"\"\n        if not data:\n            return \"\"\n        \n        headers = list(data[0].keys())\n        \n        table_html = f\"\"\"\n        <div class=\"chart-container\">\n            <h3 class=\"chart-title\">📋 Data Table</h3>\n            <table class=\"data-table\">\n                <thead>\n                    <tr>\n                        {''.join(f'<th>{header}</th>' for header in headers)}\n                    </tr>\n                </thead>\n                <tbody>\n        \"\"\"\n        \n        # Show first 10 rows\n        for row in data[:10]:\n            table_html += \"<tr>\"\n            for header in headers:\n                value = row.get(header, \"\")\n                if isinstance(value, (int, float)):\n                    value = self._format_number(value)\n                table_html += f\"<td>{value}</td>\"\n            table_html += \"</tr>\"\n        \n        if len(data) > 10:\n            table_html += f\"\"\"\n            <tr>\n                <td colspan=\"{len(headers)}\" style=\"text-align: center; color: var(--text-secondary); font-style: italic;\">\n                    ... and {len(data) - 10} more records\n                </td>\n            </tr>\n            \"\"\"\n        \n        table_html += \"\"\"\n                </tbody>\n            </table>\n        </div>\n        \"\"\"\n        \n        return table_html\n\n    def _generate_chart_scripts(self, data: List[Dict[str, Any]], analytics: Dict[str, Any]) -> str:\n        \"\"\"Generate JavaScript for drawing charts\"\"\"\n        return f\"\"\"\n        // Draw bar chart\n        if (document.getElementById('barChart')) {{\n            drawBarChart('barChart', dashboardData);\n        }}\n        \n        // Draw line chart  \n        if (document.getElementById('lineChart')) {{\n            drawLineChart('lineChart', dashboardData);\n        }}\n        \n        // Draw pie chart\n        if (document.getElementById('pieChart')) {{\n            drawPieChart('pieChart', dashboardData);\n        }}\n        \n        // Draw area chart\n        if (document.getElementById('areaChart')) {{\n            drawAreaChart('areaChart', dashboardData);\n        }}\n        \n        // Draw sales chart\n        if (document.getElementById('salesChart')) {{\n            drawBarChart('salesChart', dashboardData);\n        }}\n        \n        // Draw analytics chart\n        if (document.getElementById('analyticsChart')) {{\n            drawLineChart('analyticsChart', dashboardData);\n        }}\n        \n        // Draw metrics chart\n        if (document.getElementById('metricsChart')) {{\n            drawBarChart('metricsChart', dashboardData);\n        }}\n        \n        {self._get_chart_drawing_functions()}\n        \"\"\"\n\n    def _get_chart_drawing_functions(self) -> str:\n        \"\"\"JavaScript functions for drawing charts\"\"\"\n        return \"\"\"\n        function drawBarChart(canvasId, data) {\n            const canvas = document.getElementById(canvasId);\n            if (!canvas) return;\n            \n            const ctx = canvas.getContext('2d');\n            const colors = getThemeColors();\n            \n            // Set canvas size\n            canvas.width = canvas.offsetWidth * window.devicePixelRatio;\n            canvas.height = canvas.offsetHeight * window.devicePixelRatio;\n            ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n            \n            const width = canvas.offsetWidth;\n            const height = canvas.offsetHeight;\n            const padding = 60;\n            const chartWidth = width - 2 * padding;\n            const chartHeight = height - 2 * padding;\n            \n            // Clear canvas\n            ctx.fillStyle = colors.background;\n            ctx.fillRect(0, 0, width, height);\n            \n            // Get numeric data\n            const numericKey = Object.keys(data[0]).find(key => \n                typeof data[0][key] === 'number'\n            ) || 'Value';\n            \n            const values = data.map(d => d[numericKey] || 0);\n            const labels = data.map(d => d.Category || d.label || 'Item');\n            const maxValue = Math.max(...values);\n            \n            // Draw bars\n            const barWidth = chartWidth / data.length * 0.7;\n            const barSpacing = chartWidth / data.length * 0.3;\n            \n            values.forEach((value, index) => {\n                const x = padding + index * (barWidth + barSpacing);\n                const barHeight = (value / maxValue) * chartHeight;\n                const y = padding + chartHeight - barHeight;\n                \n                // Create gradient\n                const gradient = ctx.createLinearGradient(0, y, 0, y + barHeight);\n                gradient.addColorStop(0, colors.primary);\n                gradient.addColorStop(1, colors.secondary);\n                \n                ctx.fillStyle = gradient;\n                ctx.fillRect(x, y, barWidth, barHeight);\n                \n                // Value labels\n                ctx.fillStyle = colors.text;\n                ctx.font = '12px -apple-system, BlinkMacSystemFont, sans-serif';\n                ctx.textAlign = 'center';\n                ctx.fillText(formatNumber(value), x + barWidth/2, y - 8);\n                \n                // X-axis labels\n                ctx.save();\n                ctx.translate(x + barWidth/2, padding + chartHeight + 20);\n                ctx.rotate(-Math.PI/6);\n                ctx.textAlign = 'right';\n                ctx.fillText(labels[index], 0, 0);\n                ctx.restore();\n            });\n            \n            // Draw axes\n            ctx.strokeStyle = colors.text;\n            ctx.lineWidth = 2;\n            ctx.beginPath();\n            ctx.moveTo(padding, padding);\n            ctx.lineTo(padding, padding + chartHeight);\n            ctx.lineTo(padding + chartWidth, padding + chartHeight);\n            ctx.stroke();\n        }\n        \n        function drawLineChart(canvasId, data) {\n            const canvas = document.getElementById(canvasId);\n            if (!canvas) return;\n            \n            const ctx = canvas.getContext('2d');\n            const colors = getThemeColors();\n            \n            canvas.width = canvas.offsetWidth * window.devicePixelRatio;\n            canvas.height = canvas.offsetHeight * window.devicePixelRatio;\n            ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n            \n            const width = canvas.offsetWidth;\n            const height = canvas.offsetHeight;\n            const padding = 60;\n            const chartWidth = width - 2 * padding;\n            const chartHeight = height - 2 * padding;\n            \n            ctx.fillStyle = colors.background;\n            ctx.fillRect(0, 0, width, height);\n            \n            const numericKey = Object.keys(data[0]).find(key => \n                typeof data[0][key] === 'number'\n            ) || 'Value';\n            \n            const values = data.map(d => d[numericKey] || 0);\n            const labels = data.map(d => d.Category || d.label || 'Item');\n            const maxValue = Math.max(...values);\n            const minValue = Math.min(...values);\n            const range = maxValue - minValue || 1;\n            \n            // Draw grid\n            ctx.strokeStyle = colors.text + '20';\n            ctx.lineWidth = 1;\n            for (let i = 0; i <= 5; i++) {\n                const y = padding + (i * chartHeight / 5);\n                ctx.beginPath();\n                ctx.moveTo(padding, y);\n                ctx.lineTo(padding + chartWidth, y);\n                ctx.stroke();\n            }\n            \n            // Draw line\n            ctx.strokeStyle = colors.primary;\n            ctx.lineWidth = 3;\n            ctx.beginPath();\n            \n            values.forEach((value, index) => {\n                const x = padding + (index / (values.length - 1)) * chartWidth;\n                const y = padding + chartHeight - ((value - minValue) / range) * chartHeight;\n                \n                if (index === 0) {\n                    ctx.moveTo(x, y);\n                } else {\n                    ctx.lineTo(x, y);\n                }\n            });\n            \n            ctx.stroke();\n            \n            // Draw points\n            values.forEach((value, index) => {\n                const x = padding + (index / (values.length - 1)) * chartWidth;\n                const y = padding + chartHeight - ((value - minValue) / range) * chartHeight;\n                \n                ctx.fillStyle = colors.secondary;\n                ctx.beginPath();\n                ctx.arc(x, y, 5, 0, 2 * Math.PI);\n                ctx.fill();\n                \n                ctx.strokeStyle = colors.background;\n                ctx.lineWidth = 2;\n                ctx.stroke();\n            });\n            \n            // Labels\n            ctx.fillStyle = colors.text;\n            ctx.font = '12px -apple-system, BlinkMacSystemFont, sans-serif';\n            ctx.textAlign = 'center';\n            \n            values.forEach((value, index) => {\n                const x = padding + (index / (values.length - 1)) * chartWidth;\n                ctx.fillText(labels[index], x, padding + chartHeight + 20);\n            });\n        }\n        \n        function drawPieChart(canvasId, data) {\n            const canvas = document.getElementById(canvasId);\n            if (!canvas) return;\n            \n            const ctx = canvas.getContext('2d');\n            const colors = getThemeColors();\n            \n            canvas.width = canvas.offsetWidth * window.devicePixelRatio;\n            canvas.height = canvas.offsetHeight * window.devicePixelRatio;\n            ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n            \n            const width = canvas.offsetWidth;\n            const height = canvas.offsetHeight;\n            const centerX = width / 2;\n            const centerY = height / 2;\n            const radius = Math.min(centerX, centerY) - 60;\n            \n            ctx.fillStyle = colors.background;\n            ctx.fillRect(0, 0, width, height);\n            \n            const numericKey = Object.keys(data[0]).find(key => \n                typeof data[0][key] === 'number'\n            ) || 'Value';\n            \n            const values = data.map(d => d[numericKey] || 0);\n            const labels = data.map(d => d.Category || d.label || 'Item');\n            const total = values.reduce((sum, val) => sum + val, 0);\n            \n            const pieColors = [colors.primary, colors.secondary, colors.accent, colors.success];\n            \n            let currentAngle = -Math.PI / 2;\n            \n            values.forEach((value, index) => {\n                const sliceAngle = (value / total) * 2 * Math.PI;\n                const color = pieColors[index % pieColors.length];\n                \n                // Draw slice\n                ctx.fillStyle = color;\n                ctx.beginPath();\n                ctx.moveTo(centerX, centerY);\n                ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);\n                ctx.closePath();\n                ctx.fill();\n                \n                // Draw border\n                ctx.strokeStyle = colors.background;\n                ctx.lineWidth = 3;\n                ctx.stroke();\n                \n                // Draw label\n                const labelAngle = currentAngle + sliceAngle / 2;\n                const labelX = centerX + Math.cos(labelAngle) * (radius * 0.7);\n                const labelY = centerY + Math.sin(labelAngle) * (radius * 0.7);\n                \n                const percentage = ((value / total) * 100).toFixed(1);\n                ctx.fillStyle = colors.background;\n                ctx.font = 'bold 12px -apple-system, BlinkMacSystemFont, sans-serif';\n                ctx.textAlign = 'center';\n                ctx.fillText(percentage + '%', labelX, labelY);\n                \n                currentAngle += sliceAngle;\n            });\n        }\n        \n        function drawAreaChart(canvasId, data) {\n            const canvas = document.getElementById(canvasId);\n            if (!canvas) return;\n            \n            const ctx = canvas.getContext('2d');\n            const colors = getThemeColors();\n            \n            canvas.width = canvas.offsetWidth * window.devicePixelRatio;\n            canvas.height = canvas.offsetHeight * window.devicePixelRatio;\n            ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n            \n            const width = canvas.offsetWidth;\n            const height = canvas.offsetHeight;\n            const padding = 60;\n            const chartWidth = width - 2 * padding;\n            const chartHeight = height - 2 * padding;\n            \n            ctx.fillStyle = colors.background;\n            ctx.fillRect(0, 0, width, height);\n            \n            const numericKey = Object.keys(data[0]).find(key => \n                typeof data[0][key] === 'number'\n            ) || 'Value';\n            \n            const values = data.map(d => d[numericKey] || 0);\n            const maxValue = Math.max(...values);\n            \n            // Create gradient\n            const gradient = ctx.createLinearGradient(0, padding, 0, padding + chartHeight);\n            gradient.addColorStop(0, colors.primary + '80');\n            gradient.addColorStop(1, colors.primary + '10');\n            \n            // Draw area\n            ctx.fillStyle = gradient;\n            ctx.beginPath();\n            ctx.moveTo(padding, padding + chartHeight);\n            \n            values.forEach((value, index) => {\n                const x = padding + (index / (values.length - 1)) * chartWidth;\n                const y = padding + chartHeight - (value / maxValue) * chartHeight;\n                ctx.lineTo(x, y);\n            });\n            \n            ctx.lineTo(padding + chartWidth, padding + chartHeight);\n            ctx.closePath();\n            ctx.fill();\n            \n            // Draw line\n            ctx.strokeStyle = colors.primary;\n            ctx.lineWidth = 3;\n            ctx.beginPath();\n            \n            values.forEach((value, index) => {\n                const x = padding + (index / (values.length - 1)) * chartWidth;\n                const y = padding + chartHeight - (value / maxValue) * chartHeight;\n                \n                if (index === 0) {\n                    ctx.moveTo(x, y);\n                } else {\n                    ctx.lineTo(x, y);\n                }\n            });\n            \n            ctx.stroke();\n        }\n        \"\"\"\n\n    def create_dashboard(self) -> Message:\n        \"\"\"Main method to create dashboard\"\"\"\n        try:\n            # Parse data\n            data = self.parse_data_source()\n            analytics = self.calculate_analytics(data)\n            \n            # Create dashboard HTML\n            dashboard_html = self.create_dashboard_html(data, analytics)\n            \n            # Create response\n            response_text = f\"\"\"🏢 **{self.dashboard_title}**\n\nDashboard Type: {self.dashboard_type.replace('_', ' ').title()}\nTheme: {'Dark' if self.dark_theme else 'Light'} • Color: {self.primary_color.title()}\nData Points: {len(data)} records\nStatus: ✅ Generated successfully\n\n{dashboard_html}\n\n**📊 Dashboard Features:**\n• KPI Cards: {'✅ Enabled' if self.show_kpi_cards else '❌ Disabled'}\n• Interactive Charts: Bar, Line, Pie, Area\n• Theme Toggle: Light/Dark mode\n• Responsive Design: Mobile-friendly\n• Pure HTML/CSS/JS: No external dependencies\n\n**📈 Key Insights:**\n{chr(10).join([f\"• {k.replace('_', ' ').title()}: {self._format_number(v.get('total', 0))}\" for k, v in analytics.get('kpis', {}).items()][:3])}\"\"\"\n\n            self.status = f\"✅ Created {self.dashboard_type} dashboard with {len(data)} data points\"\n            \n            return Message(\n                text=response_text,\n                data={\n                    \"dashboard_html\": dashboard_html,\n                    \"dashboard_info\": {\n                        \"type\": self.dashboard_type,\n                        \"title\": self.dashboard_title,\n                        \"data_count\": len(data),\n                        \"analytics\": analytics,\n                        \"theme\": \"dark\" if self.dark_theme else \"light\",\n                        \"color_scheme\": self.primary_color,\n                        \"generated\": True\n                    },\n                    \"raw_data\": data\n                }\n            )\n                \n        except Exception as e:\n            error_msg = f\"❌ Dashboard Error: {str(e)}\"\n            self.status = error_msg\n            return Message(\n                text=error_msg,\n                data={\"error\": str(e), \"dashboard_type\": self.dashboard_type}\n            )"
              },
              "dark_theme": {
                "_input_type": "BoolInput",
                "advanced": false,
                "display_name": "Dark Theme",
                "dynamic": false,
                "info": "Use dark color scheme",
                "list": false,
                "list_add_label": "Add More",
                "name": "dark_theme",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "dashboard_title": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Dashboard Title",
                "dynamic": false,
                "info": "Main dashboard title",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "dashboard_title",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Business Dashboard"
              },
              "dashboard_type": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Dashboard Type",
                "dynamic": false,
                "info": "Select dashboard layout",
                "name": "dashboard_type",
                "options": [
                  "executive",
                  "sales",
                  "analytics",
                  "multi_chart"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "multi_chart"
              },
              "dataframe_input": {
                "_input_type": "DataFrameInput",
                "advanced": false,
                "display_name": "DataFrame Input",
                "dynamic": false,
                "info": "Primary data source as DataFrame",
                "input_types": [
                  "DataFrame"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "dataframe_input",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "primary_color": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Primary Color",
                "dynamic": false,
                "info": "Main color theme",
                "name": "primary_color",
                "options": [
                  "blue",
                  "green",
                  "purple",
                  "orange",
                  "red",
                  "teal"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "purple"
              },
              "show_kpi_cards": {
                "_input_type": "BoolInput",
                "advanced": false,
                "display_name": "Show KPI Cards",
                "dynamic": false,
                "info": "Include KPI summary cards",
                "list": false,
                "list_add_label": "Add More",
                "name": "show_kpi_cards",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_data_input": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Text Data Input",
                "dynamic": false,
                "info": "Fallback CSV/JSON data input",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_data_input",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Sales Q1,15000\nSales Q2,18000\nSales Q3,22000\nSales Q4,19000"
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "dashboard_title": {
                        "default": "Business Dashboard",
                        "description": "Main dashboard title",
                        "title": "Dashboard Title",
                        "type": "string"
                      },
                      "text_data_input": {
                        "default": "Sales Q1,15000\nSales Q2,18000\nSales Q3,22000\nSales Q4,19000",
                        "description": "Fallback CSV/JSON data input",
                        "title": "Text Data Input",
                        "type": "string"
                      }
                    },
                    "description": "Create dashboards using only HTML/CSS/JavaScript - no external dependencies",
                    "display_description": "Create dashboards using only HTML/CSS/JavaScript - no external dependencies",
                    "display_name": "create_dashboard",
                    "name": "create_dashboard",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "create_dashboard"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "PureDashboardComponent"
        },
        "dragging": false,
        "id": "PureDashboardComponent-ytFpQ",
        "measured": {
          "height": 515,
          "width": 320
        },
        "position": {
          "x": 880.2275798989667,
          "y": -294.50621613500914
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "MCPTools-mM35s",
          "node": {
            "base_classes": [
              "DataFrame"
            ],
            "beta": false,
            "category": "agents",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Connect to an MCP server to use its tools.",
            "display_name": "MCP Tools",
            "documentation": "https://docs.langflow.org/mcp-client",
            "edited": false,
            "field_order": [
              "mcp_server",
              "tool",
              "tool_placeholder"
            ],
            "frozen": false,
            "icon": "Mcp",
            "key": "MCPTools",
            "last_updated": "2025-09-13T06:42:09.894Z",
            "legacy": false,
            "lf_version": "1.5.0",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "group_outputs": false,
                "hidden": null,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.003932426697386162,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import asyncio\nimport re\nimport uuid\nfrom typing import Any\n\nfrom langchain_core.tools import StructuredTool\n\nfrom langflow.api.v2.mcp import get_server\nfrom langflow.base.mcp.util import (\n    MCPSseClient,\n    MCPStdioClient,\n    create_input_schema_from_json_schema,\n    update_tools,\n)\nfrom langflow.custom.custom_component.component_with_cache import ComponentWithCache\nfrom langflow.inputs.inputs import InputTypes\nfrom langflow.io import DropdownInput, McpInput, MessageTextInput, Output\nfrom langflow.io.schema import flatten_schema, schema_to_langflow_inputs\nfrom langflow.logging import logger\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.services.auth.utils import create_user_longterm_token\n\n# Import get_server from the backend API\nfrom langflow.services.database.models.user.crud import get_user_by_id\nfrom langflow.services.deps import get_session, get_settings_service, get_storage_service\n\n\ndef maybe_unflatten_dict(flat: dict[str, Any]) -> dict[str, Any]:\n    \"\"\"If any key looks nested (contains a dot or \"[index]\"), rebuild the.\n\n    full nested structure; otherwise return flat as is.\n    \"\"\"\n    # Quick check: do we have any nested keys?\n    if not any(re.search(r\"\\.|\\[\\d+\\]\", key) for key in flat):\n        return flat\n\n    # Otherwise, unflatten into dicts/lists\n    nested: dict[str, Any] = {}\n    array_re = re.compile(r\"^(.+)\\[(\\d+)\\]$\")\n\n    for key, val in flat.items():\n        parts = key.split(\".\")\n        cur = nested\n        for i, part in enumerate(parts):\n            m = array_re.match(part)\n            # Array segment?\n            if m:\n                name, idx = m.group(1), int(m.group(2))\n                lst = cur.setdefault(name, [])\n                # Ensure list is big enough\n                while len(lst) <= idx:\n                    lst.append({})\n                if i == len(parts) - 1:\n                    lst[idx] = val\n                else:\n                    cur = lst[idx]\n            # Normal object key\n            elif i == len(parts) - 1:\n                cur[part] = val\n            else:\n                cur = cur.setdefault(part, {})\n\n    return nested\n\n\nclass MCPToolsComponent(ComponentWithCache):\n    schema_inputs: list = []\n    tools: list[StructuredTool] = []\n    _not_load_actions: bool = False\n    _tool_cache: dict = {}\n    _last_selected_server: str | None = None  # Cache for the last selected server\n\n    def __init__(self, **data) -> None:\n        super().__init__(**data)\n        # Initialize cache keys to avoid CacheMiss when accessing them\n        if \"servers\" not in self._shared_component_cache:\n            self._shared_component_cache[\"servers\"] = {}\n        if \"last_selected_server\" not in self._shared_component_cache:\n            self._shared_component_cache[\"last_selected_server\"] = \"\"\n\n        # Initialize clients with access to the component cache\n        self.stdio_client: MCPStdioClient = MCPStdioClient(component_cache=self._shared_component_cache)\n        self.sse_client: MCPSseClient = MCPSseClient(component_cache=self._shared_component_cache)\n\n    default_keys: list[str] = [\n        \"code\",\n        \"_type\",\n        \"tool_mode\",\n        \"tool_placeholder\",\n        \"mcp_server\",\n        \"tool\",\n    ]\n\n    display_name = \"MCP Tools\"\n    description = \"Connect to an MCP server to use its tools.\"\n    documentation: str = \"https://docs.langflow.org/mcp-client\"\n    icon = \"Mcp\"\n    name = \"MCPTools\"\n\n    inputs = [\n        McpInput(\n            name=\"mcp_server\",\n            display_name=\"MCP Server\",\n            info=\"Select the MCP Server that will be used by this component\",\n            real_time_refresh=True,\n        ),\n        DropdownInput(\n            name=\"tool\",\n            display_name=\"Tool\",\n            options=[],\n            value=\"\",\n            info=\"Select the tool to execute\",\n            show=False,\n            required=True,\n            real_time_refresh=True,\n        ),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            info=\"Placeholder for the tool\",\n            value=\"\",\n            show=False,\n            tool_mode=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Response\", name=\"response\", method=\"build_output\"),\n    ]\n\n    async def _validate_schema_inputs(self, tool_obj) -> list[InputTypes]:\n        \"\"\"Validate and process schema inputs for a tool.\"\"\"\n        try:\n            if not tool_obj or not hasattr(tool_obj, \"args_schema\"):\n                msg = \"Invalid tool object or missing input schema\"\n                raise ValueError(msg)\n\n            flat_schema = flatten_schema(tool_obj.args_schema.schema())\n            input_schema = create_input_schema_from_json_schema(flat_schema)\n            if not input_schema:\n                msg = f\"Empty input schema for tool '{tool_obj.name}'\"\n                raise ValueError(msg)\n\n            schema_inputs = schema_to_langflow_inputs(input_schema)\n            if not schema_inputs:\n                msg = f\"No input parameters defined for tool '{tool_obj.name}'\"\n                logger.warning(msg)\n                return []\n\n        except Exception as e:\n            msg = f\"Error validating schema inputs: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n        else:\n            return schema_inputs\n\n    async def update_tool_list(self, mcp_server_value=None):\n        # Accepts mcp_server_value as dict {name, config} or uses self.mcp_server\n        mcp_server = mcp_server_value if mcp_server_value is not None else getattr(self, \"mcp_server\", None)\n        server_name = None\n        server_config_from_value = None\n        if isinstance(mcp_server, dict):\n            server_name = mcp_server.get(\"name\")\n            server_config_from_value = mcp_server.get(\"config\")\n        else:\n            server_name = mcp_server\n        if not server_name:\n            self.tools = []\n            return [], {\"name\": server_name, \"config\": server_config_from_value}\n\n        # Use shared cache if available\n        cached = self._shared_component_cache[\"servers\"].get(server_name)\n        if cached is not None:\n            self.tools = cached[\"tools\"]\n            self.tool_names = cached[\"tool_names\"]\n            self._tool_cache = cached[\"tool_cache\"]\n            server_config_from_value = cached[\"config\"]\n            return self.tools, {\"name\": server_name, \"config\": server_config_from_value}\n\n        try:\n            async for db in get_session():\n                user_id, _ = await create_user_longterm_token(db)\n                current_user = await get_user_by_id(db, user_id)\n\n                # Try to get server config from DB/API\n                server_config = await get_server(\n                    server_name,\n                    current_user,\n                    db,\n                    storage_service=get_storage_service(),\n                    settings_service=get_settings_service(),\n                )\n\n                # If get_server returns empty but we have a config, use it\n                if not server_config and server_config_from_value:\n                    server_config = server_config_from_value\n\n                if not server_config:\n                    self.tools = []\n                    return [], {\"name\": server_name, \"config\": server_config}\n\n                _, tool_list, tool_cache = await update_tools(\n                    server_name=server_name,\n                    server_config=server_config,\n                    mcp_stdio_client=self.stdio_client,\n                    mcp_sse_client=self.sse_client,\n                )\n\n                self.tool_names = [tool.name for tool in tool_list if hasattr(tool, \"name\")]\n                self._tool_cache = tool_cache\n                self.tools = tool_list\n                # Cache the result using shared cache\n\n                self._shared_component_cache[\"servers\"][server_name] = {\n                    \"tools\": tool_list,\n                    \"tool_names\": self.tool_names,\n                    \"tool_cache\": tool_cache,\n                    \"config\": server_config,\n                }\n                return tool_list, {\"name\": server_name, \"config\": server_config}\n        except (TimeoutError, asyncio.TimeoutError) as e:\n            msg = f\"Timeout updating tool list: {e!s}\"\n            logger.exception(msg)\n            raise TimeoutError(msg) from e\n        except Exception as e:\n            msg = f\"Error updating tool list: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n\n    async def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None) -> dict:\n        \"\"\"Toggle the visibility of connection-specific fields based on the selected mode.\"\"\"\n        try:\n            if field_name == \"tool\":\n                try:\n                    if len(self.tools) == 0:\n                        try:\n                            self.tools, build_config[\"mcp_server\"][\"value\"] = await self.update_tool_list()\n                            build_config[\"tool\"][\"options\"] = [tool.name for tool in self.tools]\n                            build_config[\"tool\"][\"placeholder\"] = \"Select a tool\"\n                        except (TimeoutError, asyncio.TimeoutError) as e:\n                            msg = f\"Timeout updating tool list: {e!s}\"\n                            logger.exception(msg)\n                            if not build_config[\"tools_metadata\"][\"show\"]:\n                                build_config[\"tool\"][\"show\"] = True\n                                build_config[\"tool\"][\"options\"] = []\n                                build_config[\"tool\"][\"value\"] = \"\"\n                                build_config[\"tool\"][\"placeholder\"] = \"Timeout on MCP server\"\n                            else:\n                                build_config[\"tool\"][\"show\"] = False\n                        except ValueError:\n                            if not build_config[\"tools_metadata\"][\"show\"]:\n                                build_config[\"tool\"][\"show\"] = True\n                                build_config[\"tool\"][\"options\"] = []\n                                build_config[\"tool\"][\"value\"] = \"\"\n                                build_config[\"tool\"][\"placeholder\"] = \"Error on MCP Server\"\n                            else:\n                                build_config[\"tool\"][\"show\"] = False\n\n                    if field_value == \"\":\n                        return build_config\n                    tool_obj = None\n                    for tool in self.tools:\n                        if tool.name == field_value:\n                            tool_obj = tool\n                            break\n                    if tool_obj is None:\n                        msg = f\"Tool {field_value} not found in available tools: {self.tools}\"\n                        logger.warning(msg)\n                        return build_config\n                    await self._update_tool_config(build_config, field_value)\n                except Exception as e:\n                    build_config[\"tool\"][\"options\"] = []\n                    msg = f\"Failed to update tools: {e!s}\"\n                    raise ValueError(msg) from e\n                else:\n                    return build_config\n            elif field_name == \"mcp_server\":\n                if not field_value:\n                    build_config[\"tool\"][\"show\"] = False\n                    build_config[\"tool\"][\"options\"] = []\n                    build_config[\"tool\"][\"value\"] = \"\"\n                    build_config[\"tool\"][\"placeholder\"] = \"\"\n                    build_config[\"tool_placeholder\"][\"tool_mode\"] = False\n                    self.remove_non_default_keys(build_config)\n                    return build_config\n\n                build_config[\"tool_placeholder\"][\"tool_mode\"] = True\n\n                current_server_name = field_value.get(\"name\") if isinstance(field_value, dict) else field_value\n                _last_selected_server = self._shared_component_cache.get(\"last_selected_server\") or \"\"\n\n                # To avoid unnecessary updates, only proceed if the server has actually changed\n                if (_last_selected_server in (current_server_name, \"\")) and build_config[\"tool\"][\"show\"]:\n                    return build_config\n\n                # Determine if \"Tool Mode\" is active by checking if the tool dropdown is hidden.\n                is_in_tool_mode = build_config[\"tools_metadata\"][\"show\"]\n                self._shared_component_cache.set(\"last_selected_server\", current_server_name)\n\n                # Check if tools are already cached for this server before clearing\n                cached_tools = None\n                if current_server_name:\n                    cached = self._shared_component_cache[\"servers\"].get(current_server_name)\n                    if cached is not None:\n                        cached_tools = cached[\"tools\"]\n                        self.tools = cached_tools\n                        self.tool_names = cached[\"tool_names\"]\n                        self._tool_cache = cached[\"tool_cache\"]\n\n                # Only clear tools if we don't have cached tools for the current server\n                if not cached_tools:\n                    self.tools = []  # Clear previous tools only if no cache\n\n                self.remove_non_default_keys(build_config)  # Clear previous tool inputs\n\n                # Only show the tool dropdown if not in tool_mode\n                if not is_in_tool_mode:\n                    build_config[\"tool\"][\"show\"] = True\n                    if cached_tools:\n                        # Use cached tools to populate options immediately\n                        build_config[\"tool\"][\"options\"] = [tool.name for tool in cached_tools]\n                        build_config[\"tool\"][\"placeholder\"] = \"Select a tool\"\n                    else:\n                        # Show loading state only when we need to fetch tools\n                        build_config[\"tool\"][\"placeholder\"] = \"Loading tools...\"\n                        build_config[\"tool\"][\"options\"] = []\n                    build_config[\"tool\"][\"value\"] = uuid.uuid4()\n                else:\n                    # Keep the tool dropdown hidden if in tool_mode\n                    self._not_load_actions = True\n                    build_config[\"tool\"][\"show\"] = False\n\n            elif field_name == \"tool_mode\":\n                build_config[\"tool\"][\"placeholder\"] = \"\"\n                build_config[\"tool\"][\"show\"] = not bool(field_value) and bool(build_config[\"mcp_server\"])\n                self.remove_non_default_keys(build_config)\n                self.tool = build_config[\"tool\"][\"value\"]\n                if field_value:\n                    self._not_load_actions = True\n                else:\n                    build_config[\"tool\"][\"value\"] = uuid.uuid4()\n                    build_config[\"tool\"][\"options\"] = []\n                    build_config[\"tool\"][\"show\"] = True\n                    build_config[\"tool\"][\"placeholder\"] = \"Loading tools...\"\n            elif field_name == \"tools_metadata\":\n                self._not_load_actions = False\n\n        except Exception as e:\n            msg = f\"Error in update_build_config: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n        else:\n            return build_config\n\n    def get_inputs_for_all_tools(self, tools: list) -> dict:\n        \"\"\"Get input schemas for all tools.\"\"\"\n        inputs = {}\n        for tool in tools:\n            if not tool or not hasattr(tool, \"name\"):\n                continue\n            try:\n                flat_schema = flatten_schema(tool.args_schema.schema())\n                input_schema = create_input_schema_from_json_schema(flat_schema)\n                langflow_inputs = schema_to_langflow_inputs(input_schema)\n                inputs[tool.name] = langflow_inputs\n            except (AttributeError, ValueError, TypeError, KeyError) as e:\n                msg = f\"Error getting inputs for tool {getattr(tool, 'name', 'unknown')}: {e!s}\"\n                logger.exception(msg)\n                continue\n        return inputs\n\n    def remove_input_schema_from_build_config(\n        self, build_config: dict, tool_name: str, input_schema: dict[list[InputTypes], Any]\n    ):\n        \"\"\"Remove the input schema for the tool from the build config.\"\"\"\n        # Keep only schemas that don't belong to the current tool\n        input_schema = {k: v for k, v in input_schema.items() if k != tool_name}\n        # Remove all inputs from other tools\n        for value in input_schema.values():\n            for _input in value:\n                if _input.name in build_config:\n                    build_config.pop(_input.name)\n\n    def remove_non_default_keys(self, build_config: dict) -> None:\n        \"\"\"Remove non-default keys from the build config.\"\"\"\n        for key in list(build_config.keys()):\n            if key not in self.default_keys:\n                build_config.pop(key)\n\n    async def _update_tool_config(self, build_config: dict, tool_name: str) -> None:\n        \"\"\"Update tool configuration with proper error handling.\"\"\"\n        if not self.tools:\n            self.tools, build_config[\"mcp_server\"][\"value\"] = await self.update_tool_list()\n\n        if not tool_name:\n            return\n\n        tool_obj = next((tool for tool in self.tools if tool.name == tool_name), None)\n        if not tool_obj:\n            msg = f\"Tool {tool_name} not found in available tools: {self.tools}\"\n            self.remove_non_default_keys(build_config)\n            build_config[\"tool\"][\"value\"] = \"\"\n            logger.warning(msg)\n            return\n\n        try:\n            # Store current values before removing inputs\n            current_values = {}\n            for key, value in build_config.items():\n                if key not in self.default_keys and isinstance(value, dict) and \"value\" in value:\n                    current_values[key] = value[\"value\"]\n\n            # Get all tool inputs and remove old ones\n            input_schema_for_all_tools = self.get_inputs_for_all_tools(self.tools)\n            self.remove_input_schema_from_build_config(build_config, tool_name, input_schema_for_all_tools)\n\n            # Get and validate new inputs\n            self.schema_inputs = await self._validate_schema_inputs(tool_obj)\n            if not self.schema_inputs:\n                msg = f\"No input parameters to configure for tool '{tool_name}'\"\n                logger.info(msg)\n                return\n\n            # Add new inputs to build config\n            for schema_input in self.schema_inputs:\n                if not schema_input or not hasattr(schema_input, \"name\"):\n                    msg = \"Invalid schema input detected, skipping\"\n                    logger.warning(msg)\n                    continue\n\n                try:\n                    name = schema_input.name\n                    input_dict = schema_input.to_dict()\n                    input_dict.setdefault(\"value\", None)\n                    input_dict.setdefault(\"required\", True)\n\n                    build_config[name] = input_dict\n\n                    # Preserve existing value if the parameter name exists in current_values\n                    if name in current_values:\n                        build_config[name][\"value\"] = current_values[name]\n\n                except (AttributeError, KeyError, TypeError) as e:\n                    msg = f\"Error processing schema input {schema_input}: {e!s}\"\n                    logger.exception(msg)\n                    continue\n        except ValueError as e:\n            msg = f\"Schema validation error for tool {tool_name}: {e!s}\"\n            logger.exception(msg)\n            self.schema_inputs = []\n            return\n        except (AttributeError, KeyError, TypeError) as e:\n            msg = f\"Error updating tool config: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n\n    async def build_output(self) -> DataFrame:\n        \"\"\"Build output with improved error handling and validation.\"\"\"\n        try:\n            self.tools, _ = await self.update_tool_list()\n            if self.tool != \"\":\n                # Set session context for persistent MCP sessions using Langflow session ID\n                session_context = self._get_session_context()\n                if session_context:\n                    self.stdio_client.set_session_context(session_context)\n                    self.sse_client.set_session_context(session_context)\n\n                exec_tool = self._tool_cache[self.tool]\n                tool_args = self.get_inputs_for_all_tools(self.tools)[self.tool]\n                kwargs = {}\n                for arg in tool_args:\n                    value = getattr(self, arg.name, None)\n                    if value:\n                        if isinstance(value, Message):\n                            kwargs[arg.name] = value.text\n                        else:\n                            kwargs[arg.name] = value\n\n                unflattened_kwargs = maybe_unflatten_dict(kwargs)\n\n                output = await exec_tool.coroutine(**unflattened_kwargs)\n\n                tool_content = []\n                for item in output.content:\n                    item_dict = item.model_dump()\n                    tool_content.append(item_dict)\n                return DataFrame(data=tool_content)\n            return DataFrame(data=[{\"error\": \"You must select a tool\"}])\n        except Exception as e:\n            msg = f\"Error in build_output: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n\n    def _get_session_context(self) -> str | None:\n        \"\"\"Get the Langflow session ID for MCP session caching.\"\"\"\n        # Try to get session ID from the component's execution context\n        if hasattr(self, \"graph\") and hasattr(self.graph, \"session_id\"):\n            session_id = self.graph.session_id\n            # Include server name to ensure different servers get different sessions\n            server_name = \"\"\n            mcp_server = getattr(self, \"mcp_server\", None)\n            if isinstance(mcp_server, dict):\n                server_name = mcp_server.get(\"name\", \"\")\n            elif mcp_server:\n                server_name = str(mcp_server)\n            return f\"{session_id}_{server_name}\" if session_id else None\n        return None\n\n    async def _get_tools(self):\n        \"\"\"Get cached tools or update if necessary.\"\"\"\n        mcp_server = getattr(self, \"mcp_server\", None)\n        if not self._not_load_actions:\n            tools, _ = await self.update_tool_list(mcp_server)\n            return tools\n        return []\n"
              },
              "mcp_server": {
                "_input_type": "McpInput",
                "advanced": false,
                "display_name": "MCP Server",
                "dynamic": false,
                "info": "Select the MCP Server that will be used by this component",
                "name": "mcp_server",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "mcp",
                "value": {
                  "config": {},
                  "name": "mcp_mssql_2.0_aie"
                }
              },
              "tool": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Tool",
                "dynamic": false,
                "info": "Select the tool to execute",
                "name": "tool",
                "options": [
                  "execute_query",
                  "preview_table",
                  "get_database_info",
                  "refresh_db_cache"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": true,
                "show": false,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "tool_placeholder": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Tool Placeholder",
                "dynamic": false,
                "info": "Placeholder for the tool",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "tool_placeholder",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "query": {
                        "title": "Query",
                        "type": "string"
                      }
                    },
                    "description": "Execute custom SQL queries for specific data retrieval and analysis.\n    \n    WHEN TO USE:\n    - Complex filtering, joins, or aggregations needed\n    - Specific data subsets required\n    - Data analysis or reporting tasks\n    - When preview_table is insufficient\n    \n    WHEN NOT TO USE:\n    - Initial table exploration (use preview_table)\n    - Unknown table structure (use preview_table first)\n    - Simple \"show me data\" requests (use preview_table)\n    \n    PERFORMANCE:\n    - Variable speed (depends on query complexity)\n    - Can be resource-intensive for complex queries\n    - Results truncated if > 10,000 characters or > 100 rows\n    \n    WORKFLOW POSITION:\n    - Use AFTER preview_table for initial exploration\n    - Use AFTER get_database_info for context\n    - Combine with table schema information\n    \n    Args:\n        query: T-SQL query string (SELECT statements recommended)\n               Examples: \"SELECT TOP(50) * FROM [table] WHERE condition\"\n                        \"SELECT column, COUNT(*) FROM [table] GROUP BY column\"\n    \n    Returns:\n        Formatted table results or error message\n        Large results automatically truncated with notification\n    \n    AI Decision Hints:\n    - For exploration: preview_table is faster and safer\n    - For analysis: execute_query provides flexibility\n    - Always validate table names exist first\n    - Consider result size when choosing LIMIT/TOP values\n    ",
                    "display_description": "Execute custom SQL queries for specific data retrieval and analysis.\n    \n    WHEN TO USE:\n    - Complex filtering, joins, or aggregations needed\n    - Specific data subsets required\n    - Data analysis or reporting tasks\n    - When preview_table is insufficient\n    \n    WHEN NOT TO USE:\n    - Initial table exploration (use preview_table)\n    - Unknown table structure (use preview_table first)\n    - Simple \"show me data\" requests (use preview_table)\n    \n    PERFORMANCE:\n    - Variable speed (depends on query complexity)\n    - Can be resource-intensive for complex queries\n    - Results truncated if > 10,000 characters or > 100 rows\n    \n    WORKFLOW POSITION:\n    - Use AFTER preview_table for initial exploration\n    - Use AFTER get_database_info for context\n    - Combine with table schema information\n    \n    Args:\n        query: T-SQL query string (SELECT statements recommended)\n               Examples: \"SELECT TOP(50) * FROM [table] WHERE condition\"\n                        \"SELECT column, COUNT(*) FROM [table] GROUP BY column\"\n    \n    Returns:\n        Formatted table results or error message\n        Large results automatically truncated with notification\n    \n    AI Decision Hints:\n    - For exploration: preview_table is faster and safer\n    - For analysis: execute_query provides flexibility\n    - Always validate table names exist first\n    - Consider result size when choosing LIMIT/TOP values\n    ",
                    "display_name": "execute_query",
                    "name": "execute_query",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "execute_query"
                    ]
                  },
                  {
                    "args": {
                      "limit": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": 10,
                        "title": "Limit"
                      },
                      "table_name": {
                        "title": "Table Name",
                        "type": "string"
                      }
                    },
                    "description": "Quick table data preview for initial exploration and structure understanding.\n    \n    WHEN TO USE:\n    - First look at any table\n    - Understanding data structure and content\n    - Checking if table has data\n    - Before writing complex queries\n    \n    WHEN NOT TO USE:\n    - Complex data analysis (use execute_query)\n    - Specific filtering needed (use execute_query)\n    - Large data processing (use execute_query with appropriate filters)\n    \n    PERFORMANCE:\n    - Fast execution (< 1 second typically)\n    - Low resource usage\n    - Safe for any table size\n    - Deterministic ordering (by first column)\n    \n    WORKFLOW POSITION:\n    - Use FIRST for table exploration\n    - Use BEFORE execute_query for complex analysis\n    - Combine with table schema for complete understanding\n    \n    Args:\n        table_name: Exact table name (case-sensitive)\n                   Use quotes for tables with spaces: \"My Table\"\n        limit: Rows to return (1-1000, default: 10)\n               Recommended: 10-20 for quick look, 50-100 for data analysis\n    \n    Returns:\n        Formatted table with sample data or error message\n        Empty message if table exists but has no data\n    \n    AI Decision Hints:\n    - Always start with preview_table for unknown tables\n    - Use limit 10-20 for quick exploration\n    - Use limit 50-100 when analyzing data patterns\n    - Check table existence before other operations\n    ",
                    "display_description": "Quick table data preview for initial exploration and structure understanding.\n    \n    WHEN TO USE:\n    - First look at any table\n    - Understanding data structure and content\n    - Checking if table has data\n    - Before writing complex queries\n    \n    WHEN NOT TO USE:\n    - Complex data analysis (use execute_query)\n    - Specific filtering needed (use execute_query)\n    - Large data processing (use execute_query with appropriate filters)\n    \n    PERFORMANCE:\n    - Fast execution (< 1 second typically)\n    - Low resource usage\n    - Safe for any table size\n    - Deterministic ordering (by first column)\n    \n    WORKFLOW POSITION:\n    - Use FIRST for table exploration\n    - Use BEFORE execute_query for complex analysis\n    - Combine with table schema for complete understanding\n    \n    Args:\n        table_name: Exact table name (case-sensitive)\n                   Use quotes for tables with spaces: \"My Table\"\n        limit: Rows to return (1-1000, default: 10)\n               Recommended: 10-20 for quick look, 50-100 for data analysis\n    \n    Returns:\n        Formatted table with sample data or error message\n        Empty message if table exists but has no data\n    \n    AI Decision Hints:\n    - Always start with preview_table for unknown tables\n    - Use limit 10-20 for quick exploration\n    - Use limit 50-100 when analyzing data patterns\n    - Check table existence before other operations\n    ",
                    "display_name": "preview_table",
                    "name": "preview_table",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "preview_table"
                    ]
                  },
                  {
                    "args": {},
                    "description": "Get database metadata and context for planning data operations.\n    \n    WHEN TO USE:\n    - Starting any database work session\n    - Understanding available data scope\n    - Planning data analysis workflow\n    - Checking database health and capacity\n    \n    WHEN NOT TO USE:\n    - When you already know the database structure\n    - For specific table operations (use table-specific tools)\n    \n    PERFORMANCE:\n    - Fast execution (< 2 seconds)\n    - Minimal resource usage\n    - Safe to call frequently\n    \n    WORKFLOW POSITION:\n    - Use FIRST in any database session\n    - Use BEFORE table exploration\n    - Use to provide context for other operations\n    \n    Returns:\n        JSON with database metadata:\n        - database_name: Current database name\n        - server: Server address\n        - table_count: Number of available tables\n        - server_version: SQL Server version info\n        - size_mb: Database size in megabytes (may be null)\n    \n    AI Decision Hints:\n    - Always call first to understand scope\n    - Use table_count to gauge data complexity\n    - Reference in responses to provide context\n    - Helps user understand what data is available\n    ",
                    "display_description": "Get database metadata and context for planning data operations.\n    \n    WHEN TO USE:\n    - Starting any database work session\n    - Understanding available data scope\n    - Planning data analysis workflow\n    - Checking database health and capacity\n    \n    WHEN NOT TO USE:\n    - When you already know the database structure\n    - For specific table operations (use table-specific tools)\n    \n    PERFORMANCE:\n    - Fast execution (< 2 seconds)\n    - Minimal resource usage\n    - Safe to call frequently\n    \n    WORKFLOW POSITION:\n    - Use FIRST in any database session\n    - Use BEFORE table exploration\n    - Use to provide context for other operations\n    \n    Returns:\n        JSON with database metadata:\n        - database_name: Current database name\n        - server: Server address\n        - table_count: Number of available tables\n        - server_version: SQL Server version info\n        - size_mb: Database size in megabytes (may be null)\n    \n    AI Decision Hints:\n    - Always call first to understand scope\n    - Use table_count to gauge data complexity\n    - Reference in responses to provide context\n    - Helps user understand what data is available\n    ",
                    "display_name": "get_database_info",
                    "name": "get_database_info",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "get_database_info"
                    ]
                  },
                  {
                    "args": {},
                    "description": "Refresh internal database metadata cache when structure changes.\n    \n    WHEN TO USE:\n    - After database schema changes (rare)\n    - When table list seems outdated\n    - If getting \"table not found\" errors for known tables\n    - Troubleshooting connection issues\n    \n    WHEN NOT TO USE:\n    - Regular database operations (cache auto-updates)\n    - Performance optimization (won't help)\n    - First-time database access\n    \n    PERFORMANCE:\n    - Moderate execution time (3-10 seconds)\n    - Queries all tables for fresh metadata\n    - Resource-intensive on large databases\n    \n    WORKFLOW POSITION:\n    - Use ONLY when problems occur\n    - Use AFTER database structure changes\n    - Use BEFORE retrying failed operations\n    \n    Returns:\n        Confirmation message with updated table count\n    \n    AI Decision Hints:\n    - Rarely needed in normal operations\n    - Only suggest if user reports inconsistencies\n    - Don't use for performance issues\n    - Explain what cache refresh does to user\n    ",
                    "display_description": "Refresh internal database metadata cache when structure changes.\n    \n    WHEN TO USE:\n    - After database schema changes (rare)\n    - When table list seems outdated\n    - If getting \"table not found\" errors for known tables\n    - Troubleshooting connection issues\n    \n    WHEN NOT TO USE:\n    - Regular database operations (cache auto-updates)\n    - Performance optimization (won't help)\n    - First-time database access\n    \n    PERFORMANCE:\n    - Moderate execution time (3-10 seconds)\n    - Queries all tables for fresh metadata\n    - Resource-intensive on large databases\n    \n    WORKFLOW POSITION:\n    - Use ONLY when problems occur\n    - Use AFTER database structure changes\n    - Use BEFORE retrying failed operations\n    \n    Returns:\n        Confirmation message with updated table count\n    \n    AI Decision Hints:\n    - Rarely needed in normal operations\n    - Only suggest if user reports inconsistencies\n    - Don't use for performance issues\n    - Explain what cache refresh does to user\n    ",
                    "display_name": "refresh_db_cache",
                    "name": "refresh_db_cache",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "refresh_db_cache"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "MCPTools"
        },
        "id": "MCPTools-mM35s",
        "measured": {
          "height": 311,
          "width": 320
        },
        "position": {
          "x": 386.39460977746495,
          "y": -38.04885466584205
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "MCPTools-UylKh",
          "node": {
            "base_classes": [
              "DataFrame"
            ],
            "beta": false,
            "category": "agents",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Connect to an MCP server to use its tools.",
            "display_name": "MCP Tools",
            "documentation": "https://docs.langflow.org/mcp-client",
            "edited": false,
            "field_order": [
              "mcp_server",
              "tool",
              "tool_placeholder"
            ],
            "frozen": false,
            "icon": "Mcp",
            "key": "MCPTools",
            "last_updated": "2025-09-13T06:42:09.895Z",
            "legacy": false,
            "lf_version": "1.5.0",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "group_outputs": false,
                "hidden": null,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.003932426697386162,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import asyncio\nimport re\nimport uuid\nfrom typing import Any\n\nfrom langchain_core.tools import StructuredTool\n\nfrom langflow.api.v2.mcp import get_server\nfrom langflow.base.mcp.util import (\n    MCPSseClient,\n    MCPStdioClient,\n    create_input_schema_from_json_schema,\n    update_tools,\n)\nfrom langflow.custom.custom_component.component_with_cache import ComponentWithCache\nfrom langflow.inputs.inputs import InputTypes\nfrom langflow.io import DropdownInput, McpInput, MessageTextInput, Output\nfrom langflow.io.schema import flatten_schema, schema_to_langflow_inputs\nfrom langflow.logging import logger\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.services.auth.utils import create_user_longterm_token\n\n# Import get_server from the backend API\nfrom langflow.services.database.models.user.crud import get_user_by_id\nfrom langflow.services.deps import get_session, get_settings_service, get_storage_service\n\n\ndef maybe_unflatten_dict(flat: dict[str, Any]) -> dict[str, Any]:\n    \"\"\"If any key looks nested (contains a dot or \"[index]\"), rebuild the.\n\n    full nested structure; otherwise return flat as is.\n    \"\"\"\n    # Quick check: do we have any nested keys?\n    if not any(re.search(r\"\\.|\\[\\d+\\]\", key) for key in flat):\n        return flat\n\n    # Otherwise, unflatten into dicts/lists\n    nested: dict[str, Any] = {}\n    array_re = re.compile(r\"^(.+)\\[(\\d+)\\]$\")\n\n    for key, val in flat.items():\n        parts = key.split(\".\")\n        cur = nested\n        for i, part in enumerate(parts):\n            m = array_re.match(part)\n            # Array segment?\n            if m:\n                name, idx = m.group(1), int(m.group(2))\n                lst = cur.setdefault(name, [])\n                # Ensure list is big enough\n                while len(lst) <= idx:\n                    lst.append({})\n                if i == len(parts) - 1:\n                    lst[idx] = val\n                else:\n                    cur = lst[idx]\n            # Normal object key\n            elif i == len(parts) - 1:\n                cur[part] = val\n            else:\n                cur = cur.setdefault(part, {})\n\n    return nested\n\n\nclass MCPToolsComponent(ComponentWithCache):\n    schema_inputs: list = []\n    tools: list[StructuredTool] = []\n    _not_load_actions: bool = False\n    _tool_cache: dict = {}\n    _last_selected_server: str | None = None  # Cache for the last selected server\n\n    def __init__(self, **data) -> None:\n        super().__init__(**data)\n        # Initialize cache keys to avoid CacheMiss when accessing them\n        if \"servers\" not in self._shared_component_cache:\n            self._shared_component_cache[\"servers\"] = {}\n        if \"last_selected_server\" not in self._shared_component_cache:\n            self._shared_component_cache[\"last_selected_server\"] = \"\"\n\n        # Initialize clients with access to the component cache\n        self.stdio_client: MCPStdioClient = MCPStdioClient(component_cache=self._shared_component_cache)\n        self.sse_client: MCPSseClient = MCPSseClient(component_cache=self._shared_component_cache)\n\n    default_keys: list[str] = [\n        \"code\",\n        \"_type\",\n        \"tool_mode\",\n        \"tool_placeholder\",\n        \"mcp_server\",\n        \"tool\",\n    ]\n\n    display_name = \"MCP Tools\"\n    description = \"Connect to an MCP server to use its tools.\"\n    documentation: str = \"https://docs.langflow.org/mcp-client\"\n    icon = \"Mcp\"\n    name = \"MCPTools\"\n\n    inputs = [\n        McpInput(\n            name=\"mcp_server\",\n            display_name=\"MCP Server\",\n            info=\"Select the MCP Server that will be used by this component\",\n            real_time_refresh=True,\n        ),\n        DropdownInput(\n            name=\"tool\",\n            display_name=\"Tool\",\n            options=[],\n            value=\"\",\n            info=\"Select the tool to execute\",\n            show=False,\n            required=True,\n            real_time_refresh=True,\n        ),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            info=\"Placeholder for the tool\",\n            value=\"\",\n            show=False,\n            tool_mode=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Response\", name=\"response\", method=\"build_output\"),\n    ]\n\n    async def _validate_schema_inputs(self, tool_obj) -> list[InputTypes]:\n        \"\"\"Validate and process schema inputs for a tool.\"\"\"\n        try:\n            if not tool_obj or not hasattr(tool_obj, \"args_schema\"):\n                msg = \"Invalid tool object or missing input schema\"\n                raise ValueError(msg)\n\n            flat_schema = flatten_schema(tool_obj.args_schema.schema())\n            input_schema = create_input_schema_from_json_schema(flat_schema)\n            if not input_schema:\n                msg = f\"Empty input schema for tool '{tool_obj.name}'\"\n                raise ValueError(msg)\n\n            schema_inputs = schema_to_langflow_inputs(input_schema)\n            if not schema_inputs:\n                msg = f\"No input parameters defined for tool '{tool_obj.name}'\"\n                logger.warning(msg)\n                return []\n\n        except Exception as e:\n            msg = f\"Error validating schema inputs: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n        else:\n            return schema_inputs\n\n    async def update_tool_list(self, mcp_server_value=None):\n        # Accepts mcp_server_value as dict {name, config} or uses self.mcp_server\n        mcp_server = mcp_server_value if mcp_server_value is not None else getattr(self, \"mcp_server\", None)\n        server_name = None\n        server_config_from_value = None\n        if isinstance(mcp_server, dict):\n            server_name = mcp_server.get(\"name\")\n            server_config_from_value = mcp_server.get(\"config\")\n        else:\n            server_name = mcp_server\n        if not server_name:\n            self.tools = []\n            return [], {\"name\": server_name, \"config\": server_config_from_value}\n\n        # Use shared cache if available\n        cached = self._shared_component_cache[\"servers\"].get(server_name)\n        if cached is not None:\n            self.tools = cached[\"tools\"]\n            self.tool_names = cached[\"tool_names\"]\n            self._tool_cache = cached[\"tool_cache\"]\n            server_config_from_value = cached[\"config\"]\n            return self.tools, {\"name\": server_name, \"config\": server_config_from_value}\n\n        try:\n            async for db in get_session():\n                user_id, _ = await create_user_longterm_token(db)\n                current_user = await get_user_by_id(db, user_id)\n\n                # Try to get server config from DB/API\n                server_config = await get_server(\n                    server_name,\n                    current_user,\n                    db,\n                    storage_service=get_storage_service(),\n                    settings_service=get_settings_service(),\n                )\n\n                # If get_server returns empty but we have a config, use it\n                if not server_config and server_config_from_value:\n                    server_config = server_config_from_value\n\n                if not server_config:\n                    self.tools = []\n                    return [], {\"name\": server_name, \"config\": server_config}\n\n                _, tool_list, tool_cache = await update_tools(\n                    server_name=server_name,\n                    server_config=server_config,\n                    mcp_stdio_client=self.stdio_client,\n                    mcp_sse_client=self.sse_client,\n                )\n\n                self.tool_names = [tool.name for tool in tool_list if hasattr(tool, \"name\")]\n                self._tool_cache = tool_cache\n                self.tools = tool_list\n                # Cache the result using shared cache\n\n                self._shared_component_cache[\"servers\"][server_name] = {\n                    \"tools\": tool_list,\n                    \"tool_names\": self.tool_names,\n                    \"tool_cache\": tool_cache,\n                    \"config\": server_config,\n                }\n                return tool_list, {\"name\": server_name, \"config\": server_config}\n        except (TimeoutError, asyncio.TimeoutError) as e:\n            msg = f\"Timeout updating tool list: {e!s}\"\n            logger.exception(msg)\n            raise TimeoutError(msg) from e\n        except Exception as e:\n            msg = f\"Error updating tool list: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n\n    async def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None) -> dict:\n        \"\"\"Toggle the visibility of connection-specific fields based on the selected mode.\"\"\"\n        try:\n            if field_name == \"tool\":\n                try:\n                    if len(self.tools) == 0:\n                        try:\n                            self.tools, build_config[\"mcp_server\"][\"value\"] = await self.update_tool_list()\n                            build_config[\"tool\"][\"options\"] = [tool.name for tool in self.tools]\n                            build_config[\"tool\"][\"placeholder\"] = \"Select a tool\"\n                        except (TimeoutError, asyncio.TimeoutError) as e:\n                            msg = f\"Timeout updating tool list: {e!s}\"\n                            logger.exception(msg)\n                            if not build_config[\"tools_metadata\"][\"show\"]:\n                                build_config[\"tool\"][\"show\"] = True\n                                build_config[\"tool\"][\"options\"] = []\n                                build_config[\"tool\"][\"value\"] = \"\"\n                                build_config[\"tool\"][\"placeholder\"] = \"Timeout on MCP server\"\n                            else:\n                                build_config[\"tool\"][\"show\"] = False\n                        except ValueError:\n                            if not build_config[\"tools_metadata\"][\"show\"]:\n                                build_config[\"tool\"][\"show\"] = True\n                                build_config[\"tool\"][\"options\"] = []\n                                build_config[\"tool\"][\"value\"] = \"\"\n                                build_config[\"tool\"][\"placeholder\"] = \"Error on MCP Server\"\n                            else:\n                                build_config[\"tool\"][\"show\"] = False\n\n                    if field_value == \"\":\n                        return build_config\n                    tool_obj = None\n                    for tool in self.tools:\n                        if tool.name == field_value:\n                            tool_obj = tool\n                            break\n                    if tool_obj is None:\n                        msg = f\"Tool {field_value} not found in available tools: {self.tools}\"\n                        logger.warning(msg)\n                        return build_config\n                    await self._update_tool_config(build_config, field_value)\n                except Exception as e:\n                    build_config[\"tool\"][\"options\"] = []\n                    msg = f\"Failed to update tools: {e!s}\"\n                    raise ValueError(msg) from e\n                else:\n                    return build_config\n            elif field_name == \"mcp_server\":\n                if not field_value:\n                    build_config[\"tool\"][\"show\"] = False\n                    build_config[\"tool\"][\"options\"] = []\n                    build_config[\"tool\"][\"value\"] = \"\"\n                    build_config[\"tool\"][\"placeholder\"] = \"\"\n                    build_config[\"tool_placeholder\"][\"tool_mode\"] = False\n                    self.remove_non_default_keys(build_config)\n                    return build_config\n\n                build_config[\"tool_placeholder\"][\"tool_mode\"] = True\n\n                current_server_name = field_value.get(\"name\") if isinstance(field_value, dict) else field_value\n                _last_selected_server = self._shared_component_cache.get(\"last_selected_server\") or \"\"\n\n                # To avoid unnecessary updates, only proceed if the server has actually changed\n                if (_last_selected_server in (current_server_name, \"\")) and build_config[\"tool\"][\"show\"]:\n                    return build_config\n\n                # Determine if \"Tool Mode\" is active by checking if the tool dropdown is hidden.\n                is_in_tool_mode = build_config[\"tools_metadata\"][\"show\"]\n                self._shared_component_cache.set(\"last_selected_server\", current_server_name)\n\n                # Check if tools are already cached for this server before clearing\n                cached_tools = None\n                if current_server_name:\n                    cached = self._shared_component_cache[\"servers\"].get(current_server_name)\n                    if cached is not None:\n                        cached_tools = cached[\"tools\"]\n                        self.tools = cached_tools\n                        self.tool_names = cached[\"tool_names\"]\n                        self._tool_cache = cached[\"tool_cache\"]\n\n                # Only clear tools if we don't have cached tools for the current server\n                if not cached_tools:\n                    self.tools = []  # Clear previous tools only if no cache\n\n                self.remove_non_default_keys(build_config)  # Clear previous tool inputs\n\n                # Only show the tool dropdown if not in tool_mode\n                if not is_in_tool_mode:\n                    build_config[\"tool\"][\"show\"] = True\n                    if cached_tools:\n                        # Use cached tools to populate options immediately\n                        build_config[\"tool\"][\"options\"] = [tool.name for tool in cached_tools]\n                        build_config[\"tool\"][\"placeholder\"] = \"Select a tool\"\n                    else:\n                        # Show loading state only when we need to fetch tools\n                        build_config[\"tool\"][\"placeholder\"] = \"Loading tools...\"\n                        build_config[\"tool\"][\"options\"] = []\n                    build_config[\"tool\"][\"value\"] = uuid.uuid4()\n                else:\n                    # Keep the tool dropdown hidden if in tool_mode\n                    self._not_load_actions = True\n                    build_config[\"tool\"][\"show\"] = False\n\n            elif field_name == \"tool_mode\":\n                build_config[\"tool\"][\"placeholder\"] = \"\"\n                build_config[\"tool\"][\"show\"] = not bool(field_value) and bool(build_config[\"mcp_server\"])\n                self.remove_non_default_keys(build_config)\n                self.tool = build_config[\"tool\"][\"value\"]\n                if field_value:\n                    self._not_load_actions = True\n                else:\n                    build_config[\"tool\"][\"value\"] = uuid.uuid4()\n                    build_config[\"tool\"][\"options\"] = []\n                    build_config[\"tool\"][\"show\"] = True\n                    build_config[\"tool\"][\"placeholder\"] = \"Loading tools...\"\n            elif field_name == \"tools_metadata\":\n                self._not_load_actions = False\n\n        except Exception as e:\n            msg = f\"Error in update_build_config: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n        else:\n            return build_config\n\n    def get_inputs_for_all_tools(self, tools: list) -> dict:\n        \"\"\"Get input schemas for all tools.\"\"\"\n        inputs = {}\n        for tool in tools:\n            if not tool or not hasattr(tool, \"name\"):\n                continue\n            try:\n                flat_schema = flatten_schema(tool.args_schema.schema())\n                input_schema = create_input_schema_from_json_schema(flat_schema)\n                langflow_inputs = schema_to_langflow_inputs(input_schema)\n                inputs[tool.name] = langflow_inputs\n            except (AttributeError, ValueError, TypeError, KeyError) as e:\n                msg = f\"Error getting inputs for tool {getattr(tool, 'name', 'unknown')}: {e!s}\"\n                logger.exception(msg)\n                continue\n        return inputs\n\n    def remove_input_schema_from_build_config(\n        self, build_config: dict, tool_name: str, input_schema: dict[list[InputTypes], Any]\n    ):\n        \"\"\"Remove the input schema for the tool from the build config.\"\"\"\n        # Keep only schemas that don't belong to the current tool\n        input_schema = {k: v for k, v in input_schema.items() if k != tool_name}\n        # Remove all inputs from other tools\n        for value in input_schema.values():\n            for _input in value:\n                if _input.name in build_config:\n                    build_config.pop(_input.name)\n\n    def remove_non_default_keys(self, build_config: dict) -> None:\n        \"\"\"Remove non-default keys from the build config.\"\"\"\n        for key in list(build_config.keys()):\n            if key not in self.default_keys:\n                build_config.pop(key)\n\n    async def _update_tool_config(self, build_config: dict, tool_name: str) -> None:\n        \"\"\"Update tool configuration with proper error handling.\"\"\"\n        if not self.tools:\n            self.tools, build_config[\"mcp_server\"][\"value\"] = await self.update_tool_list()\n\n        if not tool_name:\n            return\n\n        tool_obj = next((tool for tool in self.tools if tool.name == tool_name), None)\n        if not tool_obj:\n            msg = f\"Tool {tool_name} not found in available tools: {self.tools}\"\n            self.remove_non_default_keys(build_config)\n            build_config[\"tool\"][\"value\"] = \"\"\n            logger.warning(msg)\n            return\n\n        try:\n            # Store current values before removing inputs\n            current_values = {}\n            for key, value in build_config.items():\n                if key not in self.default_keys and isinstance(value, dict) and \"value\" in value:\n                    current_values[key] = value[\"value\"]\n\n            # Get all tool inputs and remove old ones\n            input_schema_for_all_tools = self.get_inputs_for_all_tools(self.tools)\n            self.remove_input_schema_from_build_config(build_config, tool_name, input_schema_for_all_tools)\n\n            # Get and validate new inputs\n            self.schema_inputs = await self._validate_schema_inputs(tool_obj)\n            if not self.schema_inputs:\n                msg = f\"No input parameters to configure for tool '{tool_name}'\"\n                logger.info(msg)\n                return\n\n            # Add new inputs to build config\n            for schema_input in self.schema_inputs:\n                if not schema_input or not hasattr(schema_input, \"name\"):\n                    msg = \"Invalid schema input detected, skipping\"\n                    logger.warning(msg)\n                    continue\n\n                try:\n                    name = schema_input.name\n                    input_dict = schema_input.to_dict()\n                    input_dict.setdefault(\"value\", None)\n                    input_dict.setdefault(\"required\", True)\n\n                    build_config[name] = input_dict\n\n                    # Preserve existing value if the parameter name exists in current_values\n                    if name in current_values:\n                        build_config[name][\"value\"] = current_values[name]\n\n                except (AttributeError, KeyError, TypeError) as e:\n                    msg = f\"Error processing schema input {schema_input}: {e!s}\"\n                    logger.exception(msg)\n                    continue\n        except ValueError as e:\n            msg = f\"Schema validation error for tool {tool_name}: {e!s}\"\n            logger.exception(msg)\n            self.schema_inputs = []\n            return\n        except (AttributeError, KeyError, TypeError) as e:\n            msg = f\"Error updating tool config: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n\n    async def build_output(self) -> DataFrame:\n        \"\"\"Build output with improved error handling and validation.\"\"\"\n        try:\n            self.tools, _ = await self.update_tool_list()\n            if self.tool != \"\":\n                # Set session context for persistent MCP sessions using Langflow session ID\n                session_context = self._get_session_context()\n                if session_context:\n                    self.stdio_client.set_session_context(session_context)\n                    self.sse_client.set_session_context(session_context)\n\n                exec_tool = self._tool_cache[self.tool]\n                tool_args = self.get_inputs_for_all_tools(self.tools)[self.tool]\n                kwargs = {}\n                for arg in tool_args:\n                    value = getattr(self, arg.name, None)\n                    if value:\n                        if isinstance(value, Message):\n                            kwargs[arg.name] = value.text\n                        else:\n                            kwargs[arg.name] = value\n\n                unflattened_kwargs = maybe_unflatten_dict(kwargs)\n\n                output = await exec_tool.coroutine(**unflattened_kwargs)\n\n                tool_content = []\n                for item in output.content:\n                    item_dict = item.model_dump()\n                    tool_content.append(item_dict)\n                return DataFrame(data=tool_content)\n            return DataFrame(data=[{\"error\": \"You must select a tool\"}])\n        except Exception as e:\n            msg = f\"Error in build_output: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n\n    def _get_session_context(self) -> str | None:\n        \"\"\"Get the Langflow session ID for MCP session caching.\"\"\"\n        # Try to get session ID from the component's execution context\n        if hasattr(self, \"graph\") and hasattr(self.graph, \"session_id\"):\n            session_id = self.graph.session_id\n            # Include server name to ensure different servers get different sessions\n            server_name = \"\"\n            mcp_server = getattr(self, \"mcp_server\", None)\n            if isinstance(mcp_server, dict):\n                server_name = mcp_server.get(\"name\", \"\")\n            elif mcp_server:\n                server_name = str(mcp_server)\n            return f\"{session_id}_{server_name}\" if session_id else None\n        return None\n\n    async def _get_tools(self):\n        \"\"\"Get cached tools or update if necessary.\"\"\"\n        mcp_server = getattr(self, \"mcp_server\", None)\n        if not self._not_load_actions:\n            tools, _ = await self.update_tool_list(mcp_server)\n            return tools\n        return []\n"
              },
              "mcp_server": {
                "_input_type": "McpInput",
                "advanced": false,
                "display_name": "MCP Server",
                "dynamic": false,
                "info": "Select the MCP Server that will be used by this component",
                "name": "mcp_server",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "mcp",
                "value": {
                  "config": {
                    "args": [
                      "/Users/grizzlymacbookpro/Downloads/mcp-server-main/Stable/pyrag_new/run.py",
                      "--mode",
                      "mcp"
                    ],
                    "command": "/opt/anaconda3/envs/mcp-rag-qdrant-1.0/bin/python",
                    "env": {
                      "EMBEDDING_PROVIDER": "ollama",
                      "OLLAMA_URL": "http://localhost:11434",
                      "QDRANT_URL": "http://34.172.249.243:6333"
                    }
                  },
                  "name": "mcp_rag_qdrant_1.0"
                }
              },
              "tool": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Tool",
                "dynamic": false,
                "info": "Select the tool to execute",
                "name": "tool",
                "options": [
                  "add_documentation",
                  "search_documentation",
                  "list_sources",
                  "add_directory"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": true,
                "show": false,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "tool_placeholder": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Tool Placeholder",
                "dynamic": false,
                "info": "Placeholder for the tool",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "tool_placeholder",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "url": {
                        "description": "URL of the documentation to fetch",
                        "title": "Url",
                        "type": "string"
                      }
                    },
                    "description": "Add documentation from a URL to the RAG database",
                    "display_description": "Add documentation from a URL to the RAG database",
                    "display_name": "add_documentation",
                    "name": "add_documentation",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "add_documentation"
                    ]
                  },
                  {
                    "args": {
                      "limit": {
                        "anyOf": [
                          {
                            "type": "number"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": 5,
                        "description": "Maximum number of results to return",
                        "title": "Limit"
                      },
                      "query": {
                        "description": "Search query",
                        "title": "Query",
                        "type": "string"
                      }
                    },
                    "description": "Search through stored documentation",
                    "display_description": "Search through stored documentation",
                    "display_name": "search_documentation",
                    "name": "search_documentation",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "search_documentation"
                    ]
                  },
                  {
                    "args": {},
                    "description": "List all documentation sources currently stored",
                    "display_description": "List all documentation sources currently stored",
                    "display_name": "list_sources",
                    "name": "list_sources",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "list_sources"
                    ]
                  },
                  {
                    "args": {
                      "path": {
                        "description": "Path to the directory containing documents",
                        "title": "Path",
                        "type": "string"
                      }
                    },
                    "description": "Add all supported files from a directory to the RAG database",
                    "display_description": "Add all supported files from a directory to the RAG database",
                    "display_name": "add_directory",
                    "name": "add_directory",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "add_directory"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "MCPTools"
        },
        "dragging": false,
        "id": "MCPTools-UylKh",
        "measured": {
          "height": 339,
          "width": 320
        },
        "position": {
          "x": 532.7317288734087,
          "y": 344.4231611531017
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "MCPTools-4iUQS",
          "node": {
            "base_classes": [
              "DataFrame"
            ],
            "beta": false,
            "category": "agents",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Connect to an MCP server to use its tools.",
            "display_name": "MCP Tools",
            "documentation": "https://docs.langflow.org/mcp-client",
            "edited": false,
            "field_order": [
              "mcp_server",
              "tool",
              "tool_placeholder"
            ],
            "frozen": false,
            "icon": "Mcp",
            "key": "MCPTools",
            "last_updated": "2025-09-13T06:45:29.811Z",
            "legacy": false,
            "lf_version": "1.5.0",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "group_outputs": false,
                "hidden": null,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.003932426697386162,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import asyncio\nimport re\nimport uuid\nfrom typing import Any\n\nfrom langchain_core.tools import StructuredTool\n\nfrom langflow.api.v2.mcp import get_server\nfrom langflow.base.mcp.util import (\n    MCPSseClient,\n    MCPStdioClient,\n    create_input_schema_from_json_schema,\n    update_tools,\n)\nfrom langflow.custom.custom_component.component_with_cache import ComponentWithCache\nfrom langflow.inputs.inputs import InputTypes\nfrom langflow.io import DropdownInput, McpInput, MessageTextInput, Output\nfrom langflow.io.schema import flatten_schema, schema_to_langflow_inputs\nfrom langflow.logging import logger\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.services.auth.utils import create_user_longterm_token\n\n# Import get_server from the backend API\nfrom langflow.services.database.models.user.crud import get_user_by_id\nfrom langflow.services.deps import get_session, get_settings_service, get_storage_service\n\n\ndef maybe_unflatten_dict(flat: dict[str, Any]) -> dict[str, Any]:\n    \"\"\"If any key looks nested (contains a dot or \"[index]\"), rebuild the.\n\n    full nested structure; otherwise return flat as is.\n    \"\"\"\n    # Quick check: do we have any nested keys?\n    if not any(re.search(r\"\\.|\\[\\d+\\]\", key) for key in flat):\n        return flat\n\n    # Otherwise, unflatten into dicts/lists\n    nested: dict[str, Any] = {}\n    array_re = re.compile(r\"^(.+)\\[(\\d+)\\]$\")\n\n    for key, val in flat.items():\n        parts = key.split(\".\")\n        cur = nested\n        for i, part in enumerate(parts):\n            m = array_re.match(part)\n            # Array segment?\n            if m:\n                name, idx = m.group(1), int(m.group(2))\n                lst = cur.setdefault(name, [])\n                # Ensure list is big enough\n                while len(lst) <= idx:\n                    lst.append({})\n                if i == len(parts) - 1:\n                    lst[idx] = val\n                else:\n                    cur = lst[idx]\n            # Normal object key\n            elif i == len(parts) - 1:\n                cur[part] = val\n            else:\n                cur = cur.setdefault(part, {})\n\n    return nested\n\n\nclass MCPToolsComponent(ComponentWithCache):\n    schema_inputs: list = []\n    tools: list[StructuredTool] = []\n    _not_load_actions: bool = False\n    _tool_cache: dict = {}\n    _last_selected_server: str | None = None  # Cache for the last selected server\n\n    def __init__(self, **data) -> None:\n        super().__init__(**data)\n        # Initialize cache keys to avoid CacheMiss when accessing them\n        if \"servers\" not in self._shared_component_cache:\n            self._shared_component_cache[\"servers\"] = {}\n        if \"last_selected_server\" not in self._shared_component_cache:\n            self._shared_component_cache[\"last_selected_server\"] = \"\"\n\n        # Initialize clients with access to the component cache\n        self.stdio_client: MCPStdioClient = MCPStdioClient(component_cache=self._shared_component_cache)\n        self.sse_client: MCPSseClient = MCPSseClient(component_cache=self._shared_component_cache)\n\n    default_keys: list[str] = [\n        \"code\",\n        \"_type\",\n        \"tool_mode\",\n        \"tool_placeholder\",\n        \"mcp_server\",\n        \"tool\",\n    ]\n\n    display_name = \"MCP Tools\"\n    description = \"Connect to an MCP server to use its tools.\"\n    documentation: str = \"https://docs.langflow.org/mcp-client\"\n    icon = \"Mcp\"\n    name = \"MCPTools\"\n\n    inputs = [\n        McpInput(\n            name=\"mcp_server\",\n            display_name=\"MCP Server\",\n            info=\"Select the MCP Server that will be used by this component\",\n            real_time_refresh=True,\n        ),\n        DropdownInput(\n            name=\"tool\",\n            display_name=\"Tool\",\n            options=[],\n            value=\"\",\n            info=\"Select the tool to execute\",\n            show=False,\n            required=True,\n            real_time_refresh=True,\n        ),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            info=\"Placeholder for the tool\",\n            value=\"\",\n            show=False,\n            tool_mode=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Response\", name=\"response\", method=\"build_output\"),\n    ]\n\n    async def _validate_schema_inputs(self, tool_obj) -> list[InputTypes]:\n        \"\"\"Validate and process schema inputs for a tool.\"\"\"\n        try:\n            if not tool_obj or not hasattr(tool_obj, \"args_schema\"):\n                msg = \"Invalid tool object or missing input schema\"\n                raise ValueError(msg)\n\n            flat_schema = flatten_schema(tool_obj.args_schema.schema())\n            input_schema = create_input_schema_from_json_schema(flat_schema)\n            if not input_schema:\n                msg = f\"Empty input schema for tool '{tool_obj.name}'\"\n                raise ValueError(msg)\n\n            schema_inputs = schema_to_langflow_inputs(input_schema)\n            if not schema_inputs:\n                msg = f\"No input parameters defined for tool '{tool_obj.name}'\"\n                logger.warning(msg)\n                return []\n\n        except Exception as e:\n            msg = f\"Error validating schema inputs: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n        else:\n            return schema_inputs\n\n    async def update_tool_list(self, mcp_server_value=None):\n        # Accepts mcp_server_value as dict {name, config} or uses self.mcp_server\n        mcp_server = mcp_server_value if mcp_server_value is not None else getattr(self, \"mcp_server\", None)\n        server_name = None\n        server_config_from_value = None\n        if isinstance(mcp_server, dict):\n            server_name = mcp_server.get(\"name\")\n            server_config_from_value = mcp_server.get(\"config\")\n        else:\n            server_name = mcp_server\n        if not server_name:\n            self.tools = []\n            return [], {\"name\": server_name, \"config\": server_config_from_value}\n\n        # Use shared cache if available\n        cached = self._shared_component_cache[\"servers\"].get(server_name)\n        if cached is not None:\n            self.tools = cached[\"tools\"]\n            self.tool_names = cached[\"tool_names\"]\n            self._tool_cache = cached[\"tool_cache\"]\n            server_config_from_value = cached[\"config\"]\n            return self.tools, {\"name\": server_name, \"config\": server_config_from_value}\n\n        try:\n            async for db in get_session():\n                user_id, _ = await create_user_longterm_token(db)\n                current_user = await get_user_by_id(db, user_id)\n\n                # Try to get server config from DB/API\n                server_config = await get_server(\n                    server_name,\n                    current_user,\n                    db,\n                    storage_service=get_storage_service(),\n                    settings_service=get_settings_service(),\n                )\n\n                # If get_server returns empty but we have a config, use it\n                if not server_config and server_config_from_value:\n                    server_config = server_config_from_value\n\n                if not server_config:\n                    self.tools = []\n                    return [], {\"name\": server_name, \"config\": server_config}\n\n                _, tool_list, tool_cache = await update_tools(\n                    server_name=server_name,\n                    server_config=server_config,\n                    mcp_stdio_client=self.stdio_client,\n                    mcp_sse_client=self.sse_client,\n                )\n\n                self.tool_names = [tool.name for tool in tool_list if hasattr(tool, \"name\")]\n                self._tool_cache = tool_cache\n                self.tools = tool_list\n                # Cache the result using shared cache\n\n                self._shared_component_cache[\"servers\"][server_name] = {\n                    \"tools\": tool_list,\n                    \"tool_names\": self.tool_names,\n                    \"tool_cache\": tool_cache,\n                    \"config\": server_config,\n                }\n                return tool_list, {\"name\": server_name, \"config\": server_config}\n        except (TimeoutError, asyncio.TimeoutError) as e:\n            msg = f\"Timeout updating tool list: {e!s}\"\n            logger.exception(msg)\n            raise TimeoutError(msg) from e\n        except Exception as e:\n            msg = f\"Error updating tool list: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n\n    async def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None) -> dict:\n        \"\"\"Toggle the visibility of connection-specific fields based on the selected mode.\"\"\"\n        try:\n            if field_name == \"tool\":\n                try:\n                    if len(self.tools) == 0:\n                        try:\n                            self.tools, build_config[\"mcp_server\"][\"value\"] = await self.update_tool_list()\n                            build_config[\"tool\"][\"options\"] = [tool.name for tool in self.tools]\n                            build_config[\"tool\"][\"placeholder\"] = \"Select a tool\"\n                        except (TimeoutError, asyncio.TimeoutError) as e:\n                            msg = f\"Timeout updating tool list: {e!s}\"\n                            logger.exception(msg)\n                            if not build_config[\"tools_metadata\"][\"show\"]:\n                                build_config[\"tool\"][\"show\"] = True\n                                build_config[\"tool\"][\"options\"] = []\n                                build_config[\"tool\"][\"value\"] = \"\"\n                                build_config[\"tool\"][\"placeholder\"] = \"Timeout on MCP server\"\n                            else:\n                                build_config[\"tool\"][\"show\"] = False\n                        except ValueError:\n                            if not build_config[\"tools_metadata\"][\"show\"]:\n                                build_config[\"tool\"][\"show\"] = True\n                                build_config[\"tool\"][\"options\"] = []\n                                build_config[\"tool\"][\"value\"] = \"\"\n                                build_config[\"tool\"][\"placeholder\"] = \"Error on MCP Server\"\n                            else:\n                                build_config[\"tool\"][\"show\"] = False\n\n                    if field_value == \"\":\n                        return build_config\n                    tool_obj = None\n                    for tool in self.tools:\n                        if tool.name == field_value:\n                            tool_obj = tool\n                            break\n                    if tool_obj is None:\n                        msg = f\"Tool {field_value} not found in available tools: {self.tools}\"\n                        logger.warning(msg)\n                        return build_config\n                    await self._update_tool_config(build_config, field_value)\n                except Exception as e:\n                    build_config[\"tool\"][\"options\"] = []\n                    msg = f\"Failed to update tools: {e!s}\"\n                    raise ValueError(msg) from e\n                else:\n                    return build_config\n            elif field_name == \"mcp_server\":\n                if not field_value:\n                    build_config[\"tool\"][\"show\"] = False\n                    build_config[\"tool\"][\"options\"] = []\n                    build_config[\"tool\"][\"value\"] = \"\"\n                    build_config[\"tool\"][\"placeholder\"] = \"\"\n                    build_config[\"tool_placeholder\"][\"tool_mode\"] = False\n                    self.remove_non_default_keys(build_config)\n                    return build_config\n\n                build_config[\"tool_placeholder\"][\"tool_mode\"] = True\n\n                current_server_name = field_value.get(\"name\") if isinstance(field_value, dict) else field_value\n                _last_selected_server = self._shared_component_cache.get(\"last_selected_server\") or \"\"\n\n                # To avoid unnecessary updates, only proceed if the server has actually changed\n                if (_last_selected_server in (current_server_name, \"\")) and build_config[\"tool\"][\"show\"]:\n                    return build_config\n\n                # Determine if \"Tool Mode\" is active by checking if the tool dropdown is hidden.\n                is_in_tool_mode = build_config[\"tools_metadata\"][\"show\"]\n                self._shared_component_cache.set(\"last_selected_server\", current_server_name)\n\n                # Check if tools are already cached for this server before clearing\n                cached_tools = None\n                if current_server_name:\n                    cached = self._shared_component_cache[\"servers\"].get(current_server_name)\n                    if cached is not None:\n                        cached_tools = cached[\"tools\"]\n                        self.tools = cached_tools\n                        self.tool_names = cached[\"tool_names\"]\n                        self._tool_cache = cached[\"tool_cache\"]\n\n                # Only clear tools if we don't have cached tools for the current server\n                if not cached_tools:\n                    self.tools = []  # Clear previous tools only if no cache\n\n                self.remove_non_default_keys(build_config)  # Clear previous tool inputs\n\n                # Only show the tool dropdown if not in tool_mode\n                if not is_in_tool_mode:\n                    build_config[\"tool\"][\"show\"] = True\n                    if cached_tools:\n                        # Use cached tools to populate options immediately\n                        build_config[\"tool\"][\"options\"] = [tool.name for tool in cached_tools]\n                        build_config[\"tool\"][\"placeholder\"] = \"Select a tool\"\n                    else:\n                        # Show loading state only when we need to fetch tools\n                        build_config[\"tool\"][\"placeholder\"] = \"Loading tools...\"\n                        build_config[\"tool\"][\"options\"] = []\n                    build_config[\"tool\"][\"value\"] = uuid.uuid4()\n                else:\n                    # Keep the tool dropdown hidden if in tool_mode\n                    self._not_load_actions = True\n                    build_config[\"tool\"][\"show\"] = False\n\n            elif field_name == \"tool_mode\":\n                build_config[\"tool\"][\"placeholder\"] = \"\"\n                build_config[\"tool\"][\"show\"] = not bool(field_value) and bool(build_config[\"mcp_server\"])\n                self.remove_non_default_keys(build_config)\n                self.tool = build_config[\"tool\"][\"value\"]\n                if field_value:\n                    self._not_load_actions = True\n                else:\n                    build_config[\"tool\"][\"value\"] = uuid.uuid4()\n                    build_config[\"tool\"][\"options\"] = []\n                    build_config[\"tool\"][\"show\"] = True\n                    build_config[\"tool\"][\"placeholder\"] = \"Loading tools...\"\n            elif field_name == \"tools_metadata\":\n                self._not_load_actions = False\n\n        except Exception as e:\n            msg = f\"Error in update_build_config: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n        else:\n            return build_config\n\n    def get_inputs_for_all_tools(self, tools: list) -> dict:\n        \"\"\"Get input schemas for all tools.\"\"\"\n        inputs = {}\n        for tool in tools:\n            if not tool or not hasattr(tool, \"name\"):\n                continue\n            try:\n                flat_schema = flatten_schema(tool.args_schema.schema())\n                input_schema = create_input_schema_from_json_schema(flat_schema)\n                langflow_inputs = schema_to_langflow_inputs(input_schema)\n                inputs[tool.name] = langflow_inputs\n            except (AttributeError, ValueError, TypeError, KeyError) as e:\n                msg = f\"Error getting inputs for tool {getattr(tool, 'name', 'unknown')}: {e!s}\"\n                logger.exception(msg)\n                continue\n        return inputs\n\n    def remove_input_schema_from_build_config(\n        self, build_config: dict, tool_name: str, input_schema: dict[list[InputTypes], Any]\n    ):\n        \"\"\"Remove the input schema for the tool from the build config.\"\"\"\n        # Keep only schemas that don't belong to the current tool\n        input_schema = {k: v for k, v in input_schema.items() if k != tool_name}\n        # Remove all inputs from other tools\n        for value in input_schema.values():\n            for _input in value:\n                if _input.name in build_config:\n                    build_config.pop(_input.name)\n\n    def remove_non_default_keys(self, build_config: dict) -> None:\n        \"\"\"Remove non-default keys from the build config.\"\"\"\n        for key in list(build_config.keys()):\n            if key not in self.default_keys:\n                build_config.pop(key)\n\n    async def _update_tool_config(self, build_config: dict, tool_name: str) -> None:\n        \"\"\"Update tool configuration with proper error handling.\"\"\"\n        if not self.tools:\n            self.tools, build_config[\"mcp_server\"][\"value\"] = await self.update_tool_list()\n\n        if not tool_name:\n            return\n\n        tool_obj = next((tool for tool in self.tools if tool.name == tool_name), None)\n        if not tool_obj:\n            msg = f\"Tool {tool_name} not found in available tools: {self.tools}\"\n            self.remove_non_default_keys(build_config)\n            build_config[\"tool\"][\"value\"] = \"\"\n            logger.warning(msg)\n            return\n\n        try:\n            # Store current values before removing inputs\n            current_values = {}\n            for key, value in build_config.items():\n                if key not in self.default_keys and isinstance(value, dict) and \"value\" in value:\n                    current_values[key] = value[\"value\"]\n\n            # Get all tool inputs and remove old ones\n            input_schema_for_all_tools = self.get_inputs_for_all_tools(self.tools)\n            self.remove_input_schema_from_build_config(build_config, tool_name, input_schema_for_all_tools)\n\n            # Get and validate new inputs\n            self.schema_inputs = await self._validate_schema_inputs(tool_obj)\n            if not self.schema_inputs:\n                msg = f\"No input parameters to configure for tool '{tool_name}'\"\n                logger.info(msg)\n                return\n\n            # Add new inputs to build config\n            for schema_input in self.schema_inputs:\n                if not schema_input or not hasattr(schema_input, \"name\"):\n                    msg = \"Invalid schema input detected, skipping\"\n                    logger.warning(msg)\n                    continue\n\n                try:\n                    name = schema_input.name\n                    input_dict = schema_input.to_dict()\n                    input_dict.setdefault(\"value\", None)\n                    input_dict.setdefault(\"required\", True)\n\n                    build_config[name] = input_dict\n\n                    # Preserve existing value if the parameter name exists in current_values\n                    if name in current_values:\n                        build_config[name][\"value\"] = current_values[name]\n\n                except (AttributeError, KeyError, TypeError) as e:\n                    msg = f\"Error processing schema input {schema_input}: {e!s}\"\n                    logger.exception(msg)\n                    continue\n        except ValueError as e:\n            msg = f\"Schema validation error for tool {tool_name}: {e!s}\"\n            logger.exception(msg)\n            self.schema_inputs = []\n            return\n        except (AttributeError, KeyError, TypeError) as e:\n            msg = f\"Error updating tool config: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n\n    async def build_output(self) -> DataFrame:\n        \"\"\"Build output with improved error handling and validation.\"\"\"\n        try:\n            self.tools, _ = await self.update_tool_list()\n            if self.tool != \"\":\n                # Set session context for persistent MCP sessions using Langflow session ID\n                session_context = self._get_session_context()\n                if session_context:\n                    self.stdio_client.set_session_context(session_context)\n                    self.sse_client.set_session_context(session_context)\n\n                exec_tool = self._tool_cache[self.tool]\n                tool_args = self.get_inputs_for_all_tools(self.tools)[self.tool]\n                kwargs = {}\n                for arg in tool_args:\n                    value = getattr(self, arg.name, None)\n                    if value:\n                        if isinstance(value, Message):\n                            kwargs[arg.name] = value.text\n                        else:\n                            kwargs[arg.name] = value\n\n                unflattened_kwargs = maybe_unflatten_dict(kwargs)\n\n                output = await exec_tool.coroutine(**unflattened_kwargs)\n\n                tool_content = []\n                for item in output.content:\n                    item_dict = item.model_dump()\n                    tool_content.append(item_dict)\n                return DataFrame(data=tool_content)\n            return DataFrame(data=[{\"error\": \"You must select a tool\"}])\n        except Exception as e:\n            msg = f\"Error in build_output: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n\n    def _get_session_context(self) -> str | None:\n        \"\"\"Get the Langflow session ID for MCP session caching.\"\"\"\n        # Try to get session ID from the component's execution context\n        if hasattr(self, \"graph\") and hasattr(self.graph, \"session_id\"):\n            session_id = self.graph.session_id\n            # Include server name to ensure different servers get different sessions\n            server_name = \"\"\n            mcp_server = getattr(self, \"mcp_server\", None)\n            if isinstance(mcp_server, dict):\n                server_name = mcp_server.get(\"name\", \"\")\n            elif mcp_server:\n                server_name = str(mcp_server)\n            return f\"{session_id}_{server_name}\" if session_id else None\n        return None\n\n    async def _get_tools(self):\n        \"\"\"Get cached tools or update if necessary.\"\"\"\n        mcp_server = getattr(self, \"mcp_server\", None)\n        if not self._not_load_actions:\n            tools, _ = await self.update_tool_list(mcp_server)\n            return tools\n        return []\n"
              },
              "mcp_server": {
                "_input_type": "McpInput",
                "advanced": false,
                "display_name": "MCP Server",
                "dynamic": false,
                "info": "Select the MCP Server that will be used by this component",
                "name": "mcp_server",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "mcp",
                "value": {
                  "config": {
                    "args": [
                      "-y",
                      "@modelcontextprotocol/server-filesystem",
                      "/Users/grizzlymacbookpro/Downloads/2025-n8n-mcp-main-2"
                    ],
                    "command": "npx"
                  },
                  "name": "filesystem"
                }
              },
              "tool": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Tool",
                "dynamic": false,
                "info": "Select the tool to execute",
                "name": "tool",
                "options": [
                  "read_file",
                  "read_text_file",
                  "read_media_file",
                  "read_multiple_files",
                  "write_file",
                  "edit_file",
                  "create_directory",
                  "list_directory",
                  "list_directory_with_sizes",
                  "directory_tree",
                  "move_file",
                  "search_files",
                  "get_file_info",
                  "list_allowed_directories"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": true,
                "show": false,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "tool_placeholder": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Tool Placeholder",
                "dynamic": false,
                "info": "Placeholder for the tool",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "tool_placeholder",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "head": {
                        "anyOf": [
                          {
                            "type": "number"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "description": "If provided, returns only the first N lines of the file",
                        "title": "Head"
                      },
                      "path": {
                        "title": "Path",
                        "type": "string"
                      },
                      "tail": {
                        "anyOf": [
                          {
                            "type": "number"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "description": "If provided, returns only the last N lines of the file",
                        "title": "Tail"
                      }
                    },
                    "description": "Read the complete contents of a file as text. DEPRECATED: Use read_text_file instead.",
                    "display_description": "Read the complete contents of a file as text. DEPRECATED: Use read_text_file instead.",
                    "display_name": "read_file",
                    "name": "read_file",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "read_file"
                    ]
                  },
                  {
                    "args": {
                      "head": {
                        "anyOf": [
                          {
                            "type": "number"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "description": "If provided, returns only the first N lines of the file",
                        "title": "Head"
                      },
                      "path": {
                        "title": "Path",
                        "type": "string"
                      },
                      "tail": {
                        "anyOf": [
                          {
                            "type": "number"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": null,
                        "description": "If provided, returns only the last N lines of the file",
                        "title": "Tail"
                      }
                    },
                    "description": "Read the complete contents of a file from the file system as text. Handles various text encodings and provides detailed error messages if the file cannot be read. Use this tool when you need to examine the contents of a single file. Use the 'head' parameter to read only the first N lines of a file, or the 'tail' parameter to read only the last N lines of a file. Operates on the file as text regardless of extension. Only works within allowed directories.",
                    "display_description": "Read the complete contents of a file from the file system as text. Handles various text encodings and provides detailed error messages if the file cannot be read. Use this tool when you need to examine the contents of a single file. Use the 'head' parameter to read only the first N lines of a file, or the 'tail' parameter to read only the last N lines of a file. Operates on the file as text regardless of extension. Only works within allowed directories.",
                    "display_name": "read_text_file",
                    "name": "read_text_file",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "read_text_file"
                    ]
                  },
                  {
                    "args": {
                      "path": {
                        "title": "Path",
                        "type": "string"
                      }
                    },
                    "description": "Read an image or audio file. Returns the base64 encoded data and MIME type. Only works within allowed directories.",
                    "display_description": "Read an image or audio file. Returns the base64 encoded data and MIME type. Only works within allowed directories.",
                    "display_name": "read_media_file",
                    "name": "read_media_file",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "read_media_file"
                    ]
                  },
                  {
                    "args": {
                      "paths": {
                        "items": {
                          "type": "string"
                        },
                        "title": "Paths",
                        "type": "array"
                      }
                    },
                    "description": "Read the contents of multiple files simultaneously. This is more efficient than reading files one by one when you need to analyze or compare multiple files. Each file's content is returned with its path as a reference. Failed reads for individual files won't stop the entire operation. Only works within allowed directories.",
                    "display_description": "Read the contents of multiple files simultaneously. This is more efficient than reading files one by one when you need to analyze or compare multiple files. Each file's content is returned with its path as a reference. Failed reads for individual files won't stop the entire operation. Only works within allowed directories.",
                    "display_name": "read_multiple_files",
                    "name": "read_multiple_files",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "read_multiple_files"
                    ]
                  },
                  {
                    "args": {
                      "content": {
                        "title": "Content",
                        "type": "string"
                      },
                      "path": {
                        "title": "Path",
                        "type": "string"
                      }
                    },
                    "description": "Create a new file or completely overwrite an existing file with new content. Use with caution as it will overwrite existing files without warning. Handles text content with proper encoding. Only works within allowed directories.",
                    "display_description": "Create a new file or completely overwrite an existing file with new content. Use with caution as it will overwrite existing files without warning. Handles text content with proper encoding. Only works within allowed directories.",
                    "display_name": "write_file",
                    "name": "write_file",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "write_file"
                    ]
                  },
                  {
                    "args": {
                      "dryRun": {
                        "anyOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": false,
                        "description": "Preview changes using git-style diff format",
                        "title": "Dryrun"
                      },
                      "edits": {
                        "items": {
                          "$ref": "#/$defs/AnonModel0"
                        },
                        "title": "Edits",
                        "type": "array"
                      },
                      "path": {
                        "title": "Path",
                        "type": "string"
                      }
                    },
                    "description": "Make line-based edits to a text file. Each edit replaces exact line sequences with new content. Returns a git-style diff showing the changes made. Only works within allowed directories.",
                    "display_description": "Make line-based edits to a text file. Each edit replaces exact line sequences with new content. Returns a git-style diff showing the changes made. Only works within allowed directories.",
                    "display_name": "edit_file",
                    "name": "edit_file",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "edit_file"
                    ]
                  },
                  {
                    "args": {
                      "path": {
                        "title": "Path",
                        "type": "string"
                      }
                    },
                    "description": "Create a new directory or ensure a directory exists. Can create multiple nested directories in one operation. If the directory already exists, this operation will succeed silently. Perfect for setting up directory structures for projects or ensuring required paths exist. Only works within allowed directories.",
                    "display_description": "Create a new directory or ensure a directory exists. Can create multiple nested directories in one operation. If the directory already exists, this operation will succeed silently. Perfect for setting up directory structures for projects or ensuring required paths exist. Only works within allowed directories.",
                    "display_name": "create_directory",
                    "name": "create_directory",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "create_directory"
                    ]
                  },
                  {
                    "args": {
                      "path": {
                        "title": "Path",
                        "type": "string"
                      }
                    },
                    "description": "Get a detailed listing of all files and directories in a specified path. Results clearly distinguish between files and directories with [FILE] and [DIR] prefixes. This tool is essential for understanding directory structure and finding specific files within a directory. Only works within allowed directories.",
                    "display_description": "Get a detailed listing of all files and directories in a specified path. Results clearly distinguish between files and directories with [FILE] and [DIR] prefixes. This tool is essential for understanding directory structure and finding specific files within a directory. Only works within allowed directories.",
                    "display_name": "list_directory",
                    "name": "list_directory",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "list_directory"
                    ]
                  },
                  {
                    "args": {
                      "path": {
                        "title": "Path",
                        "type": "string"
                      },
                      "sortBy": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": "name",
                        "description": "Sort entries by name or size",
                        "title": "Sortby"
                      }
                    },
                    "description": "Get a detailed listing of all files and directories in a specified path, including sizes. Results clearly distinguish between files and directories with [FILE] and [DIR] prefixes. This tool is useful for understanding directory structure and finding specific files within a directory. Only works within allowed directories.",
                    "display_description": "Get a detailed listing of all files and directories in a specified path, including sizes. Results clearly distinguish between files and directories with [FILE] and [DIR] prefixes. This tool is useful for understanding directory structure and finding specific files within a directory. Only works within allowed directories.",
                    "display_name": "list_directory_with_sizes",
                    "name": "list_directory_with_sizes",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "list_directory_with_sizes"
                    ]
                  },
                  {
                    "args": {
                      "path": {
                        "title": "Path",
                        "type": "string"
                      }
                    },
                    "description": "Get a recursive tree view of files and directories as a JSON structure. Each entry includes 'name', 'type' (file/directory), and 'children' for directories. Files have no children array, while directories always have a children array (which may be empty). The output is formatted with 2-space indentation for readability. Only works within allowed directories.",
                    "display_description": "Get a recursive tree view of files and directories as a JSON structure. Each entry includes 'name', 'type' (file/directory), and 'children' for directories. Files have no children array, while directories always have a children array (which may be empty). The output is formatted with 2-space indentation for readability. Only works within allowed directories.",
                    "display_name": "directory_tree",
                    "name": "directory_tree",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "directory_tree"
                    ]
                  },
                  {
                    "args": {
                      "destination": {
                        "title": "Destination",
                        "type": "string"
                      },
                      "source": {
                        "title": "Source",
                        "type": "string"
                      }
                    },
                    "description": "Move or rename files and directories. Can move files between directories and rename them in a single operation. If the destination exists, the operation will fail. Works across different directories and can be used for simple renaming within the same directory. Both source and destination must be within allowed directories.",
                    "display_description": "Move or rename files and directories. Can move files between directories and rename them in a single operation. If the destination exists, the operation will fail. Works across different directories and can be used for simple renaming within the same directory. Both source and destination must be within allowed directories.",
                    "display_name": "move_file",
                    "name": "move_file",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "move_file"
                    ]
                  },
                  {
                    "args": {
                      "excludePatterns": {
                        "anyOf": [
                          {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "default": [],
                        "title": "Excludepatterns"
                      },
                      "path": {
                        "title": "Path",
                        "type": "string"
                      },
                      "pattern": {
                        "title": "Pattern",
                        "type": "string"
                      }
                    },
                    "description": "Recursively search for files and directories matching a pattern. Searches through all subdirectories from the starting path. The search is case-insensitive and matches partial names. Returns full paths to all matching items. Great for finding files when you don't know their exact location. Only searches within allowed directories.",
                    "display_description": "Recursively search for files and directories matching a pattern. Searches through all subdirectories from the starting path. The search is case-insensitive and matches partial names. Returns full paths to all matching items. Great for finding files when you don't know their exact location. Only searches within allowed directories.",
                    "display_name": "search_files",
                    "name": "search_files",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "search_files"
                    ]
                  },
                  {
                    "args": {
                      "path": {
                        "title": "Path",
                        "type": "string"
                      }
                    },
                    "description": "Retrieve detailed metadata about a file or directory. Returns comprehensive information including size, creation time, last modified time, permissions, and type. This tool is perfect for understanding file characteristics without reading the actual content. Only works within allowed directories.",
                    "display_description": "Retrieve detailed metadata about a file or directory. Returns comprehensive information including size, creation time, last modified time, permissions, and type. This tool is perfect for understanding file characteristics without reading the actual content. Only works within allowed directories.",
                    "display_name": "get_file_info",
                    "name": "get_file_info",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "get_file_info"
                    ]
                  },
                  {
                    "args": {},
                    "description": "Returns the list of directories that this server is allowed to access. Subdirectories within these allowed directories are also accessible. Use this to understand which directories and their nested paths are available before trying to access files.",
                    "display_description": "Returns the list of directories that this server is allowed to access. Subdirectories within these allowed directories are also accessible. Use this to understand which directories and their nested paths are available before trying to access files.",
                    "display_name": "list_allowed_directories",
                    "name": "list_allowed_directories",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "list_allowed_directories"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "MCPTools"
        },
        "dragging": false,
        "id": "MCPTools-4iUQS",
        "measured": {
          "height": 331,
          "width": 320
        },
        "position": {
          "x": 2076.368069308646,
          "y": 708.5799010197468
        },
        "selected": true,
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 82.48907698653181,
      "y": 277.62360266102814,
      "zoom": 0.5593954849248901
    }
  },
  "description": "Model: gpt-oss-120b\n\nการทดสอบ: https://claude.ai/share/e0db35af-d2ca-47d6-ac12-ba166e24186f\n",
  "endpoint_name": null,
  "id": "a138c4ea-ca15-4e9c-8b9d-9b9e682f7f38",
  "is_component": false,
  "last_tested_version": "1.5.0",
  "name": "Expert Agent with RAG MSSQL Code Dashboard Filesys",
  "tags": [
    "assistants",
    "agents"
  ]
}